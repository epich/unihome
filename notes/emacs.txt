Setup on RHEL5
   wget http://ftp.gnu.org/pub/gnu/emacs/emacs-23.4.tar.gz
   ./configure --prefix=/nas/home/boreilly/sw/emacs-install --with-gif=no

Notes:
   : C-z cycles between <N> and <E> evil states.
   : Buffer menu notes:
      : To see it:
         : C-x C-b 
         : buffer-menu
      : 1 selects one file in one window.
      : bs-show is a more barebones menu function.
   : Windows notes:
      : Gets rid of all other windows: C-x 1
      : Change to other window: C-x o
   : (define-key evil-normal-state-map "o" 'next-buffer)
   : (define-key evil-normal-state-map "O" 'previous-buffer)
   : Define a function which can be called with M-x (and therefore evil mappings)
      (defun myCommand ()
        "One sentence summary of what this command do.

      More detailed documentation here."
        (interactive) ; Can have params to allow user inputted arguments
        (let (localVar1 localVar2 …)
          ; do something here …
          ; …
          ; last expression is returned
        )
      )
   : C-g quits the running/entered command
   : Help commands:
      : C-h c which command does this keystroke invoke
      : C-h k which command does this keystroke invoke and what does it do?
      : C-h l what were my last 100 typed keys
      : C-h w what key-combo does this command have?
      : C-h f what does this function do
      : C-h v what's this variable and what is it's value
      : C-h m list active modes
   : From http://sites.google.com/site/steveyegge2/effective-emacs
      : M-x describe-bindings
      : M-x describe-key
      : M-x apropos <regex>
      : M-x info
   : nxml-mode for XML editting.
   : F keys:
      (define-key python-mode-map (kbd "<f12>") 'python-switch-to-python)
   : Eval:
      M-:
   : Key chords:
      See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : Vim mapping plan:
      : Vim keys that aren't mapped to anything useful:
         t
         , mapped to M-x
         o mapped
         [
         ]
         \
         s use as prefix key
         f map to buffer menu
         ; mapped
         ' mapped
         c map as prefix key to various C- keys eg ch map to C-h
      : Vim shift- keys that aren't mapped to anything useful:
         O
         (
         )
         {
         }
         TODO
   : If Evil mode isn't enabled in a mode, revisit:
      http://lists.gnu.org/archive/html/bug-gnu-emacs/2012-01/msg00776.html
   : Tabs and spaces:
      http://cscs.umich.edu/~rlr/Misc/emacs_tabs.htm
   : Special characters:
      : Tab: hit tab key
      : Line feed: C-q C-j

Issues:
   : File reloading:
      : Figure out how to make reloading a file from disk less annoying.
         : Perhaps auto save when leaving buffer (warn if not saved), auto revert when visiting it.
            : http://stackoverflow.com/questions/1655695/i-dont-need-saving-how-to-keep-emacs-buffers-in-sync-with-files
         : Would be nice if buffer menu displayed the files that would change if reverted, so I could manually handle it.
   : Python indenting:
      : Evil visual mode indenting doesn't work right.
   : The . command doesn't work sometimes.
      i
      blah
      C-c
      j
      .
      repeats j
   : Searching issues:
      Highlight updating:
         :
            /\${
            deleted {
            $ still highlighted
         :
            /string1
            n
            i
            string2
            string2 is highlighted
   : Debugger mode overrules the o keymapping
   : Minibuffer gets hosed
      ,load-file
      Shift-Home Delete
      Minibuffer is in a bizarre state
   :::
   : Write a function to:
      : Checks a file is read permissions (so as I don't accidentally reload a file I'm changing.)
      : ct co -nc <file>
      : Reload it with the write permissions.
   : Double click select:
      : Need to be able to double click a file path and have it select all of it.
      : Double clicking a / char selects up to the . (exclusive).
      : See: http://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00015.html
   : Pasting
      : Ctrl-Shift-v doesn't paste.
      : Ctrl-y does, but if Evil mappings are removed.
   : Smart editting:
      : Need to specify how many tabs to continue code lines with.
      : Need to have backspace delete whitespace to tab stops.
   : Syntax highlighting:
      : Not keen on (in Python) strings and comments getting a similar color.
   : Look into using undo-tree extension.
   : Cursor position is difficult to discern over highlighted areas.
   : Make Emacs state visually obvious.  Ideas:
      : Have Emacs state be black fg on white bg
      : Have the status line be a different color based on evil state.
         (set-face-background 'modeline "Blue")
         Use hooks
      : Could also set color of cursor instead:
         See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : How to mark search terms with different colors?
   : Screen flashing:
      : When finished with a cycle of buffers
      : When finished with a cycle of search in a file
   : Get % to match <> such as in C++ or Java.
   : buffer-menu
      : Split to the right.
      : Display full file basename or at least widen column width.
      : Set the GTK frame title to any of the filenames, be it last visited, top of list, currently selected, whatever.
   : Navigating source code:
      : See a called function impl.
      : See who calls the currently viewed function.
      : Read the "Tags Table" section of the GNU Emacs manual.
   : Why did C-h f apropos evil.*key fail to find evil-define-key?  It found it as non regex.
   : How to toggle display of line wrapping?
   : When using 'r'
      : See https://bitbucket.org/lyro/evil/issue/149/escaping-out-of-replace
   : Visual mode
      : Bug:
         : Select text with v
         : Select different text with mouse
         : Both are highlighted, but y will only yank the second.
   : Annoying prompts:
      : When exiting with unsaved changes.
      : When opening file greater than 14MB.
   : Optimize Emacs startup
      : When loading several .java files, observed it can half a second for each Java file.
      : Try advice at: http://www.emacswiki.org/emacs/OptimizingEmacsStartup
   : Debugging through logs
      : Add log key bindings for:
         : C and C++
         : Python
         : Shell (echo)
      : ll-debug.el useful (doesn't look like it)?
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
      : How about using default behavior with keybindings for circumventing it.
   : Ordering of Evil init and customization.
      : Some of the customizations don't work when work when before, some after the evil init lines:
         (add-to-list 'load-path "~/.emacs.d/evil")
         (require 'evil)
         (evil-mode 1)
      : Doesn't work if after evil init:
         '(evil-overriding-maps nil)
      : Doesn't work if before evil init:
         '(evil-search-module (quote evil-search))
      : If there's a best practice for avoiding this gotcha, we should add it to the Wiki.  eg is there a call we can make to reinitialize evil?
   : Figure out what the debris files Emacs leaves behind are about, and whether to change settings to not create them.
      : Files with ~
      : Files with #
   : Logging
      : Is there a way to get the current function's name, in order to put in log-msg prefix.
      : Is there a way to modify the message function (with defadvice or otherwise) to prepend timestamp?
   : Make s a prefix key
      : Define keymap for it.  eg:
         : this keymap would map f to 'delete-other-windows
         : s would be point to that keymap so as 'sf' invokes 'delete-other-windows
      : Figure out what disadvantage there is to mapping "sf" together, if any.

Modifications to Evil source:
   (none)

Retired issues with residual notes:
   : All things C-g does C-c should do.
      : Try binding C-c to C-g , see:
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Lookup.html
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting.html
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Modes.html
      : Mapping to keyboard-escape-quit appears to cover most cases, except for quiting with unsaved mods.
   : Notes about the isearch evil-search-module
      : Attempted to make lazy highlighting work
         : Code:
            (setq lazy-highlight-cleanup nil)
            (setq lazy-highlight-max-at-a-time nil)
            (setq lazy-highlight-initial-delay 0)
         : Problems:
            : Doesn't highlight outside of visible area.
      : Attempted to get highlight-regexp to work
         : Code:
            (setq search-highlight nil)
            (setq isearch-lazy-highlight nil)
            ; ...
            (defun my-hi-lock-process-phrase(phrase)
               "My hack of hi-lock-process-phrase function in hi-lock.el . "
               (setq mod-phrase
                      (replace-regexp-in-string
                       "\\<[a-z]" (lambda (m) (format "[%s%s]" (upcase m) m)) phrase))
            )
            (defun my-isearch-exit ()
               (when (boundp 'hi-lock-interactive-patterns)
                  (mapc (lambda (p)
                          (unhighlight-regexp (car p)))
                        hi-lock-interactive-patterns)
               )
               ( setq search-term (car (if isearch-regexp regexp-search-ring search-ring)) )
               (if (equal search-term (downcase search-term))
                  ; Case insensitive
                  (progn
                     ; This is close to interactive highlight-phrase but without the white space rule.
                     (highlight-regexp (my-hi-lock-process-phrase search-term) 'hi-pink)
                  )
                  ; Case sensitive
                  (progn
                     (highlight-regexp search-term 'hi-pink)
                  )
               )
               (lazy-highlight-cleanup t)
            )
            (add-hook 'isearch-mode-end-hook 'my-isearch-exit)
            ; ...
            (defadvice isearch-exit (after my-isearch-exit activate)
               "Go to beginning of match, after isearch, highlight the search term "
               (when isearch-forward (goto-char isearch-other-end))
              (highlight-regexp (car (if isearch-regexp
                                         regexp-search-ring
                                       search-ring)) (find-face 'hi-pink))
            )
         : Problems:
            : highlight-regexp doesn't case-fold the same way.
      : To escape:
         (define-key isearch-mode-map (kbd "C-c") 
            (lambda ()
               (interactive)
               (dotimes (num 2) (isearch-abort))
            )
         )

Things to mention about evil:
   : Some of the customizations don't work when work when before, some after the evil init lines:
      (add-to-list 'load-path "~/.emacs.d/evil")
      (require 'evil)
      (evil-mode 1)
   Doesn't work if after evil init:
      '(evil-overriding-maps nil)
   Doesn't work if before evil init:
      '(evil-search-module (quote evil-search))
   If there's a best practice for avoiding this gotcha, we should add it to the Wiki.  eg is there a call we can make to reinitialize evil?


Selecting text in minibuffer causes odd state behavior
---
I entered the minibuffer by:
   M-x load-file
I'm then given a default path which I want to delete.  I decide to give this a shot:
   Shift-Home
   Delete
This put me in an unintuitive state in the minibuffer.  It appears I'm in a non insert mode within the minibuffer.  When using Vim I've never witnessed its minibuffer show bimodal behavior.  In gVim, selecting text in the minibuffer doesn't appear to have any utility.

To see if this was perhaps a feature rather than a bug, I tried the same thing in the editting buffer.
   A
   Shift-Home
   Delete
Unlike the minibuffer, this sequence left me in the insert state.  This inconsistency leads me to think it's a bug.



Editting in insert state with text selection
---
Evil and gVim differ in how they treat text selection while in insert mode.

Test case 1:
   Enter insert mode in the normal editting buffer.
   Select some text, say word1.1 .  Selection with the mouse suffices.
   d
   Type a word: word1.2.
   gVim behavior:
      The selected word1.1 is deleted and the word1.2 is typed in the location.
   Evil behavior:
      word1.1 remains, the letter d is inserted, and word1.2 is inserted.

   

I'll mention a third option for consideration, which is similar most editors except these two:

We should also consider how this should be 

I wouldn't mind if Evil implemented a behavior that is different from both of these, but similiar to most editors:
   word1.1 is deleted, d and word1.2 are inserted.

I mention this for consideration only because it might make it easier to make the bahvior treatment in the minibuffer
I wouldn't mind too much if Evil treated this case as most editors, where word1.1 is deleted, d and word

Note: I wouldn't mind if Evil strayed from gVim and 

I say 



A nice enhancement might be to allow text selection to do something usefulj

