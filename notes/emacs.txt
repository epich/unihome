Notes:
   : Websites:
      http://git.savannah.gnu.org/cgit/
      http://hydra.nixos.org/jobset/gnu/emacs-trunk
         Glenn Morris describes it: http://lists.gnu.org/archive/html/emacs-devel/2013-09/msg00205.html
      Emacs bugs: http://debbugs.gnu.org/cgi/pkgreport.cgi?include=originator%3AOReilly;package=emacs
   : Setup on RHEL5
       wget http://ftp.gnu.org/pub/gnu/emacs/emacs-23.4.tar.gz
       ./configure --prefix=/nas/home/boreilly/sw/emacs-install --with-gif=no
   : Run tests, eg in bash:
      (make && cd test/automated ; ../../src/emacs -Q --batch -L :. -l ./undo-tests.el -f ert-run-tests-batch-and-exit)
   : Run specific test:
      (make && cd test/automated ; ../../src/emacs -Q --batch -L :. -l ./undo-tests.el --eval '(ert-run-tests-batch-and-exit "undo-test-in-region-eob")')
   : Redisplay
      : Eli explains redisplay: http://lists.gnu.org/archive/html/emacs-devel/2014-03/msg00677.html
   : Patches:
      http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00441.html
      http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00628.html
   : Editting keyboard macros
      C-x( 	start-kbd-macro 	Starts recording keystrokes
      C-x) 	end-kbd-macro	Stop recording keystrokes
      C-xe 	call-last-kbd-macro 	
      C-g 	keyboard-quit 	quit defining
      C-uC-x( 		Executes current macro and opens it for appending new commands
              name-last-kbd-macro 	Gives the macro a name
              insert-kbd-macro	inserts the textual definition at the current point
      usually done into the .emacs file
              set-local-key key macroname 	binds the key name to the macro for this session
      C-uC-xq		Insert a pause into a macro definition
      ESC C-c 	Continue in the macro after a pause
   : Debugging tips
      : In Emacs C code
         : Printing Lisp_Object from C
            : Try Fprin1_to_string, then look into SBYTES, SCHARS, SDATA, print_object, print_string.
         : Print backtrace from C
            : assign global noninteractive to true, Fbacktrace(), assign back to old value
         : int: primitive to Lisp_Object: make_number
         : int: Lisp_Object to primitive: XINT
         : string: primitive to Lisp_Object: build_string
         : Eli uses message_dolog function to print in C code
            : http://lists.gnu.org/archive/html/bug-gnu-emacs/2014-05/msg01025.html
         : Use external-debugging-output to print to stderr from Elisp
      : In GDB:
         : M-x gdb
            : Use provided -i=mi flag then executable to debug
         : run <args>
         : cccc or zcc translated to C-c C-c will send SIGINT
         : cccz or zcz translated to C-c C-z is supposed to send SIGTSTP
         : SIGSTOP can be sent from a separate terminal: kill -s STOP <pid>
         : C-x SPC to add breakpoint
         : gud-remove to remove breakpoint
         : gud-until to run until current line is reached
         : noninteractive = true
         : p Fprint1(lisp_object, Qnil)
         : p fflush(stdout)
         : According to Emacs Manual Checklist section:
            : Start GDB in src directory in order to load .gdbinit
            : Use pr from .gdbinit to print Lisp_Objects
               : Only works in running process, not with core dump
            : xbacktrace
            : See also etc/DEBUG
         : To debug Emacs in a terminal, see https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-10/msg00353.html
         : Print a Lisp variable: https://lists.gnu.org/archive/html/bug-gnu-emacs/2014-04/msg00088.html
      : Lisp debugging:
         : If Emacs hangs, set debug-on-quit to t
         : Debugging font lock
            : Stefan:
               : https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-11/msg00070.html
               : https://lists.gnu.org/archive/html/bug-gnu-emacs/2014-01/msg00061.html
               : (setq font-lock-support-mode nil) before visiting the buffer
               : M-x jit-lock-debug-mode
               : (setq debug-on-error t)
            : Wrap known font lock function in condition-case with (debug ...) as a handler
            : Also try debug-on-signal t
         : Removing the .elc can give more informative backtraces
         : Capture backtraces for later inspection, see macroexp--backtrace per http://lists.gnu.org/archive/html/emacs-devel/2014-05/msg00268.html
         : Stefan's advice for putting Lisp backtraces in error objects: http://lists.gnu.org/archive/html/emacs-devel/2014-08/msg00482.html
   : Run Emacs generally with --enable-checking as noted: --enable-checking or CFLAGS='-DENABLE_CHECKING'
   : Line in file for macros:
      http://lists.gnu.org/archive/html/help-gnu-emacs/2013-11/msg00201.html
   : Committing to Emacs
      : vc-dir
      : vc-next-action
      : log-edit-insert-changelog (again or with prefix)
      : vc-next-action
   : C-z cycles between <N> and <E> evil states.
   : Increment numbers: see http://www.emacswiki.org/emacs/NumbersInRegisters
   : Buffer menu notes:
      : To see it:
         : C-x C-b 
         : buffer-menu
      : 1 selects one file in one window.
      : bs-show is a more barebones menu function.
   : Windows notes:
      : Gets rid of all other windows: C-x 1
      : Change to other window: C-x o
      : Split the same window side by side: C-x 3
   : Keymap notes:
      : An entry in a keymap can redirect to the key in a specified alternate keymap.
      : To determine the code for a key (C-c for example):
         (progn ?\C-c)
   : Ediff notes:
      : Multi-file patches:
         : Requires context or unified diffs (-c or -u).
            : Use diff -u
         : Doesn't appear to work on directory structures
            : Workaround: Copy files to a directory to structure is flat
         : Steps:
            : Open emacs on the diff file
            : M-x ediff-patch-file
            : Follow prompts
         : Vertical mode:
            : \|
   : Useful commands:
      : align-regexp for aligning to the right of other text, eg Python dictionaries with an entry per line, use :.*, as regexp.
      : To align rows and columns of a CSV file: C-u M-x align-regexp RET ,\(\s-*\) RET RET RET y
         : From: http://stackoverflow.com/questions/970759/how-to-align-arguments-to-functions-in-emacs
   : Etags
      : Call visit-tag-table function to load TAGS file.
   : Use M-; on a selection to comment it out.
   : (define-key evil-normal-state-map "o" 'next-buffer)
   : (define-key evil-normal-state-map "O" 'previous-buffer)
   : Define a function which can be called with M-x (and therefore evil mappings)
      (defun myCommand ()
        "One sentence summary of what this command do.

      More detailed documentation here."
        (interactive) ; Can have params to allow user inputted arguments
        (let (localVar1 localVar2 …)
          ; do something here …
          ; …
          ; last expression is returned
        )
      )
   : Help commands:
      : C-h a command-apropos
      : C-h b describe-bindings 
      : C-h c which command does this keystroke invoke (briefly in minibuffer)
      : C-h k which command does this keystroke invoke and what does it do?
      : C-h l what were my last 100 typed keys
      : C-h w what key-combo does this command have?
      : C-h f what does this function do
      : C-h v what's this variable and what is it's value
      : C-h m describe-mode describes major mode and lists minor modes
      : C-h i See Elisp manual among other things
      : C-u C-h i then path to .info file.
   : From http://sites.google.com/site/steveyegge2/effective-emacs
      : M-x describe-bindings
      : M-x describe-key
      : M-x apropos <regex>
      : M-x info
   : Customization notes:
      : These two do the same thing:
         ;; Set manually
         (setq evil-overriding-maps nil)
         ;; Set via the Emacs customization
         (custom-set-variables
          '(evil-overriding-maps nil)
          )
   : nxml-mode for XML editing.
      : To pretty-print a region: "C-u M-| xmllint --format -" or to preview exclude C-u
   : F keys:
      (define-key python-mode-map (kbd "<f12>") 'python-switch-to-python)
   : Eval:
      M-:
   : Key chords:
      See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : Modes (major, minor)
      : Use magic-mode-alist to use the beginning of a buffer to determine major mode.
   : Modeline:
      : To change color of modeline:
         (set-face-background 'modeline "Blue")
   : Point:
      : To change color of point:
         http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : CEDET
      : Notes:
         : EDE:
            : Sets up project.
            : Can be used to restrict search space for Semantic.
         : Semantic
            : Smart Help/Jump (show info and jump to definition)
            : Symbol References (where is a symbol referenced)
            : Smart completion: (require 'semantic-ia)
            : Know about system headers: (require 'semantic-gcc)
               : Also: (semantic-add-system-include "~/exp/include/boost_1_37" 'c++-mode)
         : COGRE
            : UML diagrams (Cogre)
         : Reference "gentle introduction": http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html
         : To generate a semanticdb for the whole source tree, see Eric's answer at:
            http://sourceforge.net/mailarchive/forum.php?thread_name=514A7623.10400%40siege-engine.com&forum_name=cedet-devel
         : Project root
            : semanticdb-project-roots is nil.  Seems to be independent of EDE's project roots.
            : This returns EDE project root:
               (ede-toplevel-project-or-nil "/psd15/linux/boreilly/cc/l0int/vobs/goes_r_dev/Software_Engineering/IPT_PG/Dev/src/L1Processing/SEISS_L1b/SEISS_CommonUtilities/src")
         : Commands to remember:
            semantic-c-describe-environment
            C-x B
            C-c , C-h
   : JDEE
      : To use, may have to download Ant and ant-contrib, latter from sourceforge
      : Was necessary to hack the build, see .emacs.d/patches/jdee-build.diff
   : Syntax tables:
      : Useful post: http://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00015.html
      : Worth keeping in mind: http://stackoverflow.com/questions/9595277/emacs-xterm-mouse-mode-double-click-to-highlight-word
   : Optimization:
      : Use elp Elisp profiler
         : Example:
            : elp-instrument-package
            : Enter semantic-
            : elp-instrument-package
            : Enter semanticdb-
            : Execute a command such as semantic-ia-fast-jump
            : elp-results
      : Memory profiler:
         : From https://lists.gnu.org/archive/html/bug-gnu-emacs/2014-03/msg00395.html
            : M-x profiler-start RET mem RET [...] M-x profiler-report RET
      : http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips
      : http://www.emacswiki.org/emacs/OptimizingEmacsStartup
      : http://stackoverflow.com/questions/778716/how-can-i-make-emacs-start-up-faster/779145#779145
   : Vim mapping plan:
      : Vim keys that aren't mapped to anything useful:
         t
         , mapped Emacs execution of keyboard macro
         o use as prefix key
         [ mapped
         ] mapped
         \ mapped
         s use as prefix key
         f map to buffer menu
         ; mapped
         ' mapped
         c map as prefix key to various C- keys eg ch map to C-h
         SPACE
         RET
      : Vim shift- keys that aren't mapped to anything useful:
         C
         F
         J mapped
         K mapped
         O
         P
         Q
         T
         U mapped
         V mapped
         Y
         Z
         (
         )
         {
         }
         TODO
   : Version control
      : Opening through symlinks in an hg repo is slow by a factor of about 5.
   : If Evil mode isn't enabled in a mode, revisit:
      http://lists.gnu.org/archive/html/bug-gnu-emacs/2012-01/msg00776.html
   : Tabs and spaces:
      http://cscs.umich.edu/~rlr/Misc/emacs_tabs.htm
   : Special characters:
      : Tab: hit tab key
      : Line feed: C-q C-j
   : Run emacs without reading .emacs:
      emacs --no-init-file
   : Editing lisp:
      : CL Wiki: http://www.cliki.net/Editing%20Lisp%20Code%20with%20Emacs
   : Whitespace
      : Use delete-trailing-whitespace, whitespace-* functions to clean up trailing whitespace on lines.
   : Evil g prefix key compared with C-x prefix key, with usefulness annotation (Y/N)
      (define-key evil-normal-state-map "g&" 'evil-ex-repeat-global-substitute)
         Undefined
      N (define-key evil-normal-state-map "g8" 'what-cursor-position)
         Y Prefix key for printing unusual characters
      (define-key evil-normal-state-map "ga" 'what-cursor-position)
         N Prefix key for abbrev functions
      N (define-key evil-normal-state-map "gi" 'evil-insert-resume)
         Y insert-file
      (define-key evil-normal-state-map "gJ" 'evil-join-whitespace)
         Undefined
      N (define-key evil-normal-state-map "gq" 'evil-fill-and-move)
         Y kbd-macro-query
      (define-key evil-normal-state-map "gw" 'evil-fill)
         Undefined
      Y (define-key evil-normal-state-map "gu" 'evil-downcase)
         Y undo-tree-visualize
      (define-key evil-normal-state-map "gU" 'evil-upcase)
         N undo-tree-visualize
      (define-key evil-normal-state-map "gf" 'find-file-at-point)
         N set-fill-column
      (define-key evil-normal-state-map "gF" 'evil-find-file-at-point-with-line)
         N set-fill-column
      (define-key evil-normal-state-map "g?" 'evil-rot13)
         Undefined
      (define-key evil-normal-state-map "g~" 'evil-invert-case)
         Undefined
      Y (define-key evil-normal-state-map "g;" 'goto-last-change)
         Y comment-set-column
      (define-key evil-normal-state-map "g," 'goto-last-change-reverse)
         Undefined
      Y (define-key evil-motion-state-map "gd" 'evil-goto-definition)
         N dired
      Y (define-key evil-motion-state-map "ge" 'evil-backward-word-end)
         N kmacro-end-and-call-macro
      Y (define-key evil-motion-state-map "gE" 'evil-backward-WORD-end)
         N kmacro-end-and-call-macro
      (define-key evil-motion-state-map "gg" 'evil-goto-first-line)
         Undefined
      (define-key evil-motion-state-map "gj" 'evil-next-visual-line)
         Undefined
      N (define-key evil-motion-state-map "gk" 'evil-previous-visual-line)
         N kill-buffer
      N (define-key evil-motion-state-map "g0" 'evil-beginning-of-visual-line)
         Y delete-window
      (define-key evil-motion-state-map "g_" 'evil-last-non-blank)
         Undefined
      N (define-key evil-motion-state-map "g^" 'evil-first-non-blank-of-visual-line)
         N enlarge-window
      N (define-key evil-motion-state-map "g$" 'evil-end-of-visual-line)
         Y set-selective-display
      (define-key evil-motion-state-map "g\C-]" 'find-tag)
         Undefined
      Y (define-key evil-motion-state-map "gv" 'evil-visual-restore)
         Y Prefix key for version control

Retired issues with residual notes:
   : Automatic scrolling:
      : Emacs manual:
         http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Scrolling.html
      : Email threads
         : Using around advice to change automatic scrolling variables doesn't work:
            http://lists.gnu.org/archive/html/help-gnu-emacs/2013-05/msg00722.html
         : scroll-conservatively==1 fails occasionally for fast navigation up:
            http://lists.gnu.org/archive/html/help-gnu-emacs/2013-05/msg00731.html
      : Programming:
         : Elisp manual sections:
            http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Lines
            http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Screen-Lines
            http://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html
         : For end-of-visible-line code, if needed:
            http://www.emacswiki.org/emacs/VisibleLines
         : Tried advising move-line, resulted in jumpier navigation -- faster and slower across stretches
         : Tried implementing my-scroll-maybe for use in advising evil-search functions and others
            : Should I use cache-long-line-scans?
            : Compare performance in files with long lines
            : Need to figure out the functions to advise, looks like several of Evil's search functions are necessary
            : Need to finish my-scroll-maybe code, and document once working
            : I've found when scroll-down is used when point is outside visible area, it scrolls as though point is recentered
               : If this is valid, use this to fix my-scroll-maybe to not call (redisplay) explicitly?
               : Note: recenter puts point just below center when there's an odd number of visible lines
   : All things C-g does C-c should do.
      : Mapping to keyboard-escape-quit appears to cover most cases, except for quiting with unsaved mods.
      : Try keyboard-translate or key-translation-map
         : An example is described here: http://emacswiki.org/emacs-en/BackspaceKey
   : Using function advice to add prefix to message function.
      : Turns out to not work well in the minibuffer when error messages are written, eg:
         : Searching with evil-search, upon typing the first char that doesn't yield a match.
      : For posterity, the code:
         (defadvice message (before message-add-prefix-advice
                                    (format-string &rest args))
           "Add prefix string to message."
           (let ((format-string-pos 0) (args-pos 1))
             ; Error if I use ad-set-arg.  Maybe because of the documented
             ; "riskiness" of advising primitive functions.
             ;(ad-set-arg (ad-get-arg format-string-pos) (concat "%s" format-string))
             (setq format-string (concat "%s" format-string))
             (setq args (cons (format "%s " (get-time-str)) args))
             ))
         ; Declare args for efficiency of primitive function advising.
         (ad-define-subr-args 'message '(format-string &rest args))
         (ad-activate 'message)
   : Notes about inserting Unicode characters
      : Codes of interest (hex):
         : • is 2022
         : μ is 03bc
         : σ is 03c3
      : Can use function ucs-insert which has key binding C-x 8 RET
      : Can use tex mode:
         : Commands:
            M-x set-input-method
            tex
            \bullet
         : Note: doesn't set the input method back.
   : Notes about the isearch evil-search-module
      : Attempted to make lazy highlighting work
         : Code:
            (setq lazy-highlight-cleanup nil)
            (setq lazy-highlight-max-at-a-time nil)
            (setq lazy-highlight-initial-delay 0)
         : Problems:
            : Doesn't highlight outside of visible area.
      : Attempted to get highlight-regexp to work
         : Code:
            (setq search-highlight nil)
            (setq isearch-lazy-highlight nil)
            ; ...
            (defun my-hi-lock-process-phrase(phrase)
               "My hack of hi-lock-process-phrase function in hi-lock.el . "
               (setq mod-phrase
                      (replace-regexp-in-string
                       "\\<[a-z]" (lambda (m) (format "[%s%s]" (upcase m) m)) phrase))
            )
            (defun my-isearch-exit ()
               (when (boundp 'hi-lock-interactive-patterns)
                  (mapc (lambda (p)
                          (unhighlight-regexp (car p)))
                        hi-lock-interactive-patterns)
               )
               ( setq search-term (car (if isearch-regexp regexp-search-ring search-ring)) )
               (if (equal search-term (downcase search-term))
                  ; Case insensitive
                  (progn
                     ; This is close to interactive highlight-phrase but without the white space rule.
                     (highlight-regexp (my-hi-lock-process-phrase search-term) 'hi-pink)
                  )
                  ; Case sensitive
                  (progn
                     (highlight-regexp search-term 'hi-pink)
                  )
               )
               (lazy-highlight-cleanup t)
            )
            (add-hook 'isearch-mode-end-hook 'my-isearch-exit)
            ; ...
            (defadvice isearch-exit (after my-isearch-exit activate)
               "Go to beginning of match, after isearch, highlight the search term "
               (when isearch-forward (goto-char isearch-other-end))
              (highlight-regexp (car (if isearch-regexp
                                         regexp-search-ring
                                       search-ring)) (find-face 'hi-pink))
            )
         : Problems:
            : highlight-regexp doesn't case-fold the same way.
      : To escape:
         (define-key isearch-mode-map (kbd "C-c") 
            (lambda ()
               (interactive)
               (dotimes (num 2) (isearch-abort))
            )
         )
   : Auto Complete
      ;;; Initialize Auto Complete
      (defvar my-ac-build-path "~/.emacs.d/auto-complete-1.3.1/build" "Path to built ac")
      (defun setup-auto-complete ()
        "Set up Auto Complete"
         ;; Initialize 
         (log-msg "Initializing Auto Complete.")
         (add-to-list 'load-path my-ac-build-path)
         (require 'auto-complete-config)
         (add-to-list 'ac-dictionary-directories (format "%s/ac-dict" my-ac-build-path))
         (ac-config-default)

         ;; Configure
         ;;
         ;; RET can cause auto completion when literal RET is what I want.
         ;; Auto Complete is perfectly usable via TAB alone, so disable RET key binding.
         (define-key ac-complete-mode-map (kbd "RET") nil))
      ;; I'm not finding Auto Complete useful at the moment.
      ;; (init-auto-complete)
   : Java Auto Complete
      : Popup causes several seconds of delay.  What's the cause?
         : Try advice in dev's email, generate own smaller set of Java tags.
      : Why is there no popup for ajc-import-class-under-point?
          : auto-complete places text under point.  See mailing list.
   : Keymapping
      : Edebug keymapping
         : How to have Edebug go to motion state?
            ;;(evil-set-initial-state 'debugger-mode 'motion) ; Doesn't work for Edebug
            ;; (delete 'debugger-mode evil-emacs-state-modes) ; How to delete from state-modes
         : Setting evil-overriding-maps and evil-intercept-maps to nil allowed Evil keybindings
      : How to change minor mode keymap priorities:
         : http://stackoverflow.com/questions/9648218/conflicting-keyboard-shortcuts-in-two-emacs-minor-modes
         : http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs/5340797#5340797
      : Mapping key sequence to global prefix keymap.
         : Don't work:
            ;; (define-key evil-motion-state-map "cc" (lambda () (interactive) mode-specific-map))
            ;;        ; Reason: "cc" does nothing, probably returns variable but doesn't know to use it as a keymap.
            ;; (define-key evil-motion-state-map "cc" mode-specific-map)
            ;;        ; Reason: Looks in function cell of mode-specific-map, but it's a variable.
            ;; (define-key evil-motion-state-map "cc" 'mode-specific-map)
            ;;        ; Reason: Looks in function cell of mode-specific-map, but it's a variable.
         : Works partially:
            ;; (define-key evil-motion-state-map "cc" mode-specific-map)
            ;; (define-key evil-motion-state-map "ch" help-map)
            ;; (define-key evil-motion-state-map "cx" ctl-x-map)
      : Use Key Translations which are active based on Evil state.
         : Patch: http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00449.html
         : Another patch: http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00628.html
         : Neither patch is in 24.2, but is on the Emacs trunk.
      : Xah Lee reports bug with universal argument and key-translation-map
         https://groups.google.com/forum/?fromgroups#!topic/comp.emacs/p7PLJgWzNkY
      : Instead of o and O key bindings for previous-buffer and next-buffer respectively, use C-x <left> and C-x <right>.
      : The key-binding function gets the keymap data structure.
         : Does not observe Key Translation
         : To make its output readable:
            : Mark region and: s/(/\n(/g
            : Mark region and use = command
   : File reloading:
      : Figure out how to make reloading a file from disk less annoying.
         : It would be good to have similar abstraction as Vim:
            : When leaving file that is unsaved, prompt the user.  Allow for an override.
            : When visiting a file, reload it from disk.
      : A solution to this should also solve Clearcase checkout annoyances.  clearcase.el slows down init.
      : auto-revert
         : Doesn't revert file permissions, even though revert-buffer does.
            : Submitted bug report to GNU, ID 11549, merged with ID 11412.
               : The auto-revert-handler function locally binds buffer-read-only so as when revert-buffer updates it, it's lost at the end of the local binding.
         : Has high latency
            : Might be configurable
         : Flash screen when auto revert occurs.
      : revert-buffer invocation
         : Perhaps when start viewing buffer
            : Investigate using window-scroll-functions for this.
               : See http://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Hooks.html
               : Tried copying Evil's example for using window-scroll-functions, but can't get my-window-scroll invoked.
                  (defun my-window-scroll
                    (log-msg "Inside my-window-scroll"))
                  (add-hook 'window-scroll-functions 'my-window-scroll nil t)
         : Consider whether I'm ok with losing undo history.  Maybe make it conditional for the need to revert.
   : ClearCase
      : Key bindings:
         C-x v =        diff prev version
         C-x v o        checkout
         C-x v n        checkin
         C-x v u        uncheckout
         C-c C-c        finish comment
      : Deleted Elisp:
         ;;; Initialize Clearcase extensions
         ;;
         ;; Initializes slowly (byte compiled).  I observed 12 seconds for 17 script files in a snapshot view.
         ;; For that reason, I don't load ClearCase until I need it.
         (defun my-load-clearcase ()
            (log-msg "Loading ClearCase.")
            (add-to-list 'load-path "~/.emacs.d/clearcase")
            ;; clearcase.el uses obsolete variable.  This works around it.
            (defvar directory-sep-char ?/)
            (require 'clearcase)
            (clearcase-mode 1)
            ;; Key bindings.  Little rhyme or reason except to choose unclaimed keys.
            (define-key clearcase-prefix-map "n" 'clearcase-checkin-current-buffer)
            (define-key clearcase-prefix-map "o" 'my-clearcase-checkout)
            (log-msg "Loaded ClearCase.")
            )
         (defun my-clearcase-checkout ()
           (interactive)
           (my-load-clearcase)
           (clearcase-commented-checkout buffer-file-name "Checked out through Emacs. ")
           )
         (define-key evil-motion-state-map "sco" 'my-clearcase-checkout)
         (define-key evil-motion-state-map "slc" (lambda () (interactive) (my-load-clearcase)))
   : Logging
      : Is there a way to get the current function's name, in order to put in log-msg prefix.
         : Doesn't appear possible
         : See http://stackoverflow.com/questions/7345794/how-do-you-find-the-name-of-the-current-running-funciton-current-function-this
   : ParEdit
      : Removed from my .emacs.d for reasons:
         : Only suitable if user can live with the invariant that parentheses are always balanced.
            : It intends the user to add and remove parens always in pairs.  Inserting
            only a closing paren in a valid place doesn't work well, I would need to use C-q to
            do so.  Another example is commenting out code.  ParEdit expects you would use the
            wholistic M-; and will misbehave if you add ';' characters line by line.
            : Since I like occasional non wholistic editing, I use ParEdit functions without
            the minor mode enabled.
         : Useful functions are available with Emacs' builtin lisp.el , and behave better.
            : Example:
               (list 'quote (cons nil nil ))
               ; Select: (co
               ; Execute paredit-wrap-around, code becomes: (list 'quote (co () ns nil nil ))
      : There are experimental ParEdit patches.
         : http://mumble.net/~campbell/tmp/paredit/
         : None look compelling given their experimental nature.
      : Developer
         : campbell@mumble.net
         : Blog: http://mumble.net/~campbell/blag.txt
   : GDB in Emacs:
      : Problems with gdb command (now use gud-gdb instead):
         : Strange windowing behavior, possibly by design:
            : The GDB window inappropriately switches to where execution breaks
            : C-x o buffer-menu then opens buffer-menu in the wrong window
         : Dx in buffer-menu, buffer-menu continues to display deleted buffers
            : Does this happen anytime killing one buffer kills others?
         : See bug http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16745
   : Disconnect about Emacs' notion of where point is:
      : Decided to live with it
      : Official definition of point is between chars, cursor displayed over the next char.
         : Those which use this definition:
            : ParEdit
            : Emacs commands for navigating sexp
            : Emacs paren navigation:
               http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html
            : show-paren-mode
            : Text selection
      : Evil compensates for some of these, presenting an abstraction of point over char:
         : When clicking past end of line, point is moved left one.
         : show-paren-mode is augmented, see evil-integration.el's show-paren-function.
         : Text selection
         : Sexp evaluation (unconfirmed)
      : Ask on Emacs mailing list about this topic.
         : Create a defcustom for whether the user wants the over-char abstraction?
      : Study how Evil copes with this.
         : See comment block in evil-commands.el "Text objects"
         : evil-define-motion type inclusive/exclusive looks relevant.
         : Ask on Evil mailing list about approaches for dealing with this.
