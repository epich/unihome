High priority issues:
   : = key binding
      : Have = trim trailing whitespace in the selected region.
         : Use the whitespace-* elisp functions.
         : Someone patched delete-trailing-whitespace to delete within region if active:
            : URL: http://lists.gnu.org/archive/html/emacs-devel/2011-02/msg00432.html
            : I copied the patch as patched-delete-trailing-whitespace
            : Should prefer the whitespace elisp functions unless they don't work out.
         : A simple combination in a lambda bound to "=" doesn't work.
            : Code: (define-key evil-normal-state-map "=" (lambda () (interactive) (patched-delete-trailing-whitespace) (evil-indent)))
            : Might need to call evil-indent in my copied func.
            : Crucially: figure out how interactive elisp uses active regions.
   : Have the p command paste and do a ==
      : Make this conditional on the line pasting to is whitespace only.
      : Perhaps file bug about pasting with 'p' on lines with no chars.  A space char is effectively created.
      : Either way, when fixed, undo p and P swapping in evil-normal-state-map .
   : Backspace to tab stop backward-delete-whitespace-to-tab-stop
      : Doesn't correctly handle backspace when there's a selection.
         : Snag with solution:
            : Go into insert mode
            : Shift select text
            : C-h k verifies backspace calls backward-delete-char-untabify
            : Works:
               : Hit Backspace key when .emacs bound it to backward-delete-char-untabify
            : Does not work:
               : M-x backward-delete-char-untabify
            : Does not work:
               : Hit backspace key when .emacs bound it to backspace-whitespace-to-tab-stop
   : Screen flashing:
      : When finished with a cycle of search in a file
   : Disconnect about Emacs' notion of where point is:
      : Official definition of point is between chars, cursor displayed over the next char.
         : Uses this definition:
            : ParEdit commands of interest
            : Emacs commands for navigating sexp
      : There's an over-char abstraction, more intuitive based on display of cursor.
         : Uses this abstraction:
            : Evil
            : show-paren-mode
      : Ask on Emacs mailing list about this topic.
         : Is there reason to have a defcustom for those that wish the alternate abstraction?
      : Study how Evil copes with this.
         : See comment block in evil-commands.el "Text objects"
         : evil-define-motion type inclusive/exclusive looks relevant.
         : Ask on Evil mailing list about approaches for dealing with this.
   : Figure out how to edit elisp code efficiently.
      : Cope with official definition of where point is.
         : Extend, wrap, advise, or replace functions for which I want the over-char abstraction.
            : ParEdit commands of interest
            : Emacs sexp commands
      : Have editing functions operate on an sexp when point is within it.
      : Syntax highlighting:
         : Highlight text based on its level in the sexp tree, from point to the root.
            : pairs of parens in different colors.
               : Perhaps extending paren (which provides show-paren-mode) is doable.  paren.el looks fairly simple.
                  : Checkout the bzr revision history, how frequent, who edits it?
            : pairs of parens, including within them, in different colors.
               See code samples at: http://community.schemewiki.org/?scheme-faq-language
      : ParEdit
         : Issues:
            : paredit-wrap-around (bound to sej) doesn't do as expected when there's active region.
               Example:
                  (list 'quote (cons nil nil ))
                  ; Select: (co
                  ; Execute function, code becomes: (list 'quote (co () ns nil nil ))
                  ; Expected: (list 'quote ((cons nil nil )))
                     : Same as if just the ( was selected, but you have more of the sexp selected.
                  ; Less ideal, but better: (list 'quote ((co)ns nil nil ))
            : paredit-splice-sexp (bound to sek) doesn't do as expected when there's active region.
         : Email developer:
            : Ask about whether he is maintaining, referring to comment in blag.txt
            : Ask why it's not on GitHub.
            : Point out bugs described above (not location of point issue).
            : Ask about syntax highlighting.
         : Developer
            : campbell@mumble.net
            : Blog: http://mumble.net/~campbell/blag.txt
      : Automatically balance space between parens.

Low priority issues:
   : Keyboard macros
      : Weird bug:
         : In scratch buffer, in one insertion, create, left justified:
            a
            b
            c
            a
            b
            c
            a
            b
            c
         : Use the Emacs style kbdmacro to consolidate into three lines of "a b c".
         : Hit 'u' for undo.
         : Entire contents of scratch disappear, including the top default comments.
      : Does Evil's keyboard macro ('q') integrate better with the undo system?
   : Updating of highlighted search
      : I find the highlights for my searches with evil-search don't update as I'd expect.  Examples:
         1: Search on a term that appears throughout file.  Hold {{{j}}}.  Search terms will scroll in and out of view without becoming highlighted.
         2: Search for foo: {{{/foo}}}.  Put point over "f", {{{x}}} to delete it.  oo remains highlighted.  Moving around with {{{j}}}, {{{k}}} doesn't update the highlighting.
         3: Similarly, inserting text before "foo" creates incorrect highlighting.  {{{i}}}, type "baz", now "bazfoo" is highlighted.
         4: In Vim, if I search and replace (with {{{:1,$s/old/new/g}}}), then undo, the "old" string is highlighted.  Evil doesn't do that.  In Vim I liked this for verifying complex search and replace operations.
         5: Similarly, in Vim, a search and replace would use the new search term for further {{{n}}}, {{{N}}}.  So {{{:1,$s/old/new/g}}}, then {{{n}}} would go to instances of "old".
      : Bug submitted to Evil project.
         : Issue 1 is resolved by changing evil-ex-hl-idle-update function's call to run-at-time, using 0.01 instead of 0.1.
   : Escaping out of informal Evil states, such as 'd' and '='.
      : Appears C-c is a prefix key, need to undefine it.
         : Some unsuccessful attempts are commented out.
         : Emacs manual says prefix keys can be removed, references the Elisp manual's Key Bindings section.
   : When up arrowing through search history, Vim goes to end of line, Evil beginning.
      : This is consistent with Emacs minibuffer in general.  Investigate
      : Can I use an Evil ex hook for this?  See:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
   : C-c bug:
      : Occasionally I get to a state which looks like insert, but has a C-c mapping for keyboard-quit.
   : How to mark search terms with different colors?
      : Submit RFE to Evil for a function analogous to highlight-regexp and highlight-phrase .
      : Need Evil analog to highlight-regexp and highlight-phrase
      : Look more at evil-ex-make-hl
      : Need a way to clear them.  evil-ex-delete-hl perhaps.
   : Repeat . command issues:
      : Pasting text into Emacs isn't recorded to repeat ring.
         : Bug report submitted to Evil project.
   : File reloading:
      : Figure out how to make reloading a file from disk less annoying.
         : It would be good to have similar abstraction as Vim:
            : When leaving file that is unsaved, prompt the user.  Allow for an override.
            : When visiting a file, reload it from disk.
      : A solution to this should also solve Clearcase checkout annoyances.  clearcase.el slows down init.
      : auto-revert
         : Doesn't revert file permissions, even though revert-buffer does.
            : Submitted bug report to GNU, ID 11549, merged with ID 11412.
            : Notes on the code:
               : revert-buffer is in files.el
               : auto-revert-handler is in autorevert.el
               : Not sure which part of the revert-buffer function updates the permissions (file-modes)
                  : Might be useful to try out the elisp debugger to determine this.
               : insert-file-contents appears to be the substantive function that does the reverting.
                  : auto-revert-tail-handler calls this, but when I tried using auto-revert-tail it did not cause an update of file permissions.
         : Has high latency
            : Might be configurable
         : Flash screen when auto revert occurs.
      : revert-buffer invocation
         : Perhaps when start viewing buffer
            : Investigate using window-scroll-functions for this.
               : See http://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Hooks.html
               : Tried copying Evil's example for using window-scroll-functions, but can't get my-window-scroll invoked.
                  (defun my-window-scroll
                    (log-msg "Inside my-window-scroll"))
                  (add-hook 'window-scroll-functions 'my-window-scroll nil t)
         : Consider whether I'm ok with losing undo history.  Maybe make it conditional for the need to revert.
   : Debugger
      : Evil bug when exiting debugger, submitted bug report.
   : buffer-menu
      : Display full file basename or at least widen column width.
      : Learn more about it
   : Look into using undo-tree extension.
   : Explore dired
   : Explore org-mode
   : Navigating source code:
      : See a called function impl.
      : See who calls the currently viewed function.
      : Read the "Tags Table" section of the GNU Emacs manual.
      : Learn about etags.
   : Figure out how to do merges with a relevant VCS.
      : Learn Ediff first.
   : Being prompted about running Python process is annoying.
      : CEDET starts it for sake of auto completion.
   : Smart editing:
      : Need to specify how many tabs to continue code lines with.
         : Done for Python (as much as can be)
         : Do for C like languages
         : Do for XML
   : electric-pair minor mode
      : Put /** */ in pair list.
      : Remove ' from pair list.  It's annoying in comments with English contractions.
      : There are circumstances when it is annoying when inserting into existing code.
         : Perhaps: insert the closing pair only when there is only whitespace to the end of line.
   : Double click select:
      : Need to be able to double click a file path and have it select all of it.
      : Double clicking a / char selects up to the . (exclusive).
      : Hacking syntax tables looks like the canonical and most generalized solution:
         http://emacswiki.org/emacs/EmacsSyntaxTable
      : A targetted way to hack this just for mouse clicking:
         : http://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00015.html
         : Would be good to pursue if hacking the syntax table is more generalized than I find I want.
      : Relevant, but not particularly helpful:
         http://stackoverflow.com/questions/9595277/emacs-xterm-mouse-mode-double-click-to-highlight-word
   : Syntax highlighting:
      : Not keen on (in Python) strings and comments getting a similar color.
   : Cursor position is difficult to discern over highlighted areas.
   : Make Emacs state visually obvious.  Ideas:
      : Have Emacs state be black fg on white bg
      : Have the status line be a different color based on evil state.
         (set-face-background 'modeline "Blue")
         Use hooks
      : Could also set color of cursor instead:
         See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : Get % to match <> such as in C++ or Java.
   : Frame's title
      : Set title to include host and directory (after file's basename)
      : Set title for Untitled buffers.
   : How to toggle display of line wrapping?
   : Visual mode
      : Bug:
         : Select text with v
         : Select different text with mouse
         : Both are highlighted, but y will only yank the second.
         : Report submitted to project.
      : Bug:
         : Select with mouse, char under point is not highlighted, but it is with v selection.
         : Report submitted to project.
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
                  : c-guess does a lot of other things I think, which makes it run long.
               : elisp initialization:
                  ;;; Initialize cc-mode
                  ;;
                  ;; cc-mode is distributed with Emacs, but using a newer version in order to get 
                  ;; style guessing.
                  (add-to-list 'load-path "~/.emacs.d/cc-mode")
   : Figure out what the debris files Emacs leaves behind are about, and whether to change settings to not create them.
      : Determined what they are.
      : Decide if I want to place them under a dir in my home.
   : Opening through symlinks in an hg repo is slow by a factor of about 5.
   : Logging
      : In the my-insert-java-log function, \t is inserting literal tabs.
         : Figure out how to use major mode's indenting feature in these kind of editing functions.
         : Fix to insert (my-continuation-offset) spaces instead.
      : Add log key bindings for:
         : C and C++
         : Shell (echo)
      : Is there a way to get the current function's name, in order to put in log-msg prefix.
   : Organize and optimize Emacs lisp init code.
      : Move most of .emacs code to .el files and build it with the others.
      : Links:
         : Optimization: http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips
         : Optimization: http://www.emacswiki.org/emacs/OptimizingEmacsStartup
         : Optimization: http://stackoverflow.com/questions/778716/how-can-i-make-emacs-start-up-faster/779145#779145
      : Create error handling such that a single failure doesn't abort my init.
         : See http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Errors
      : Write code which automates benchmarking a bit better.
         : If the elisp manual link above is insufficient:
            : Elisp:
               : Have the elisp measure the time elapsed from start of .emacs to end of term-setup-hook.
               : Maybe output result to stdout to facilitate analyzing multiple runs of Emacs.
                  : For printing to stdout, might be helpful:
                     http://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html
            : Maybe need a higher Python script to
               : start up Emacs multiple times
               : discard the first run in case there's any caching or byte compiling that occurs.
   : Read the Elisp manual:
      : Debugging
      : Command loop
      : Marks
   : Read the Emacs manual:
      : Keyboard macros
      : Killing and Moving Text
         : Learn about the kill ring and registers
      : Amusements

Notes:
   : Setup on RHEL5
       wget http://ftp.gnu.org/pub/gnu/emacs/emacs-23.4.tar.gz
       ./configure --prefix=/nas/home/boreilly/sw/emacs-install --with-gif=no
   : Editting macros
      C-x( 	start-kbd-macro 	Starts recording keystrokes
      C-x) 	end-kbd-macro	Stop recording keystrokes
      C-xe 	call-last-kbd-macro 	
      C-g 	keyboard-quit 	quit defining
      C-uC-x( 		Executes current macro and opens it for appending new commands
              name-last-kbd-macro 	Gives the macro a name
              insert-kbd-macro	inserts the textual definition at the current point
      usually done into the .emacs file
              set-local-key key macroname 	binds the key name to the macro for this session
      C-uC-xq		Insert a pause into a macro definition
      ESC C-c 	Continue in the macro after a pause
   : C-z cycles between <N> and <E> evil states.
   : Buffer menu notes:
      : To see it:
         : C-x C-b 
         : buffer-menu
      : 1 selects one file in one window.
      : bs-show is a more barebones menu function.
   : Windows notes:
      : Gets rid of all other windows: C-x 1
      : Change to other window: C-x o
      : Split the same window side by side: C-x 3
   : Use M-; on a selection to comment it out.
   : (define-key evil-normal-state-map "o" 'next-buffer)
   : (define-key evil-normal-state-map "O" 'previous-buffer)
   : Define a function which can be called with M-x (and therefore evil mappings)
      (defun myCommand ()
        "One sentence summary of what this command do.

      More detailed documentation here."
        (interactive) ; Can have params to allow user inputted arguments
        (let (localVar1 localVar2 …)
          ; do something here …
          ; …
          ; last expression is returned
        )
      )
   : Help commands:
      : C-h a command-apropos
      : C-h b describe-bindings 
      : C-h c which command does this keystroke invoke (briefly in minibuffer)
      : C-h k which command does this keystroke invoke and what does it do?
      : C-h l what were my last 100 typed keys
      : C-h w what key-combo does this command have?
      : C-h f what does this function do
      : C-h v what's this variable and what is it's value
      : C-h m describe-mode describes major mode and lists minor modes
      : C-h i See Elisp manual among other things
   : From http://sites.google.com/site/steveyegge2/effective-emacs
      : M-x describe-bindings
      : M-x describe-key
      : M-x apropos <regex>
      : M-x info
   : nxml-mode for XML editing.
   : F keys:
      (define-key python-mode-map (kbd "<f12>") 'python-switch-to-python)
   : Eval:
      M-:
   : Key chords:
      See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : Vim mapping plan:
      : Vim keys that aren't mapped to anything useful:
         t available
         , mapped Emacs execution of keyboard macro
         o mapped
         [
         ]
         \
         s use as prefix key
         f map to buffer menu
         ; mapped
         ' mapped
         c map as prefix key to various C- keys eg ch map to C-h
      : Vim shift- keys that aren't mapped to anything useful:
         O
         (
         )
         {
         }
         TODO
   : If Evil mode isn't enabled in a mode, revisit:
      http://lists.gnu.org/archive/html/bug-gnu-emacs/2012-01/msg00776.html
   : Tabs and spaces:
      http://cscs.umich.edu/~rlr/Misc/emacs_tabs.htm
   : Special characters:
      : Tab: hit tab key
      : Line feed: C-q C-j
   : Run emacs without reading .emacs:
      emacs --no-init-file
   : Key bindings in minibuffer:
      : See Frank Fischer's posting at:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
      : Is there a way to disable electric-pair-mode in the minibuffer?
   : Editing lisp:
      : CL Wiki: http://www.cliki.net/Editing%20Lisp%20Code%20with%20Emacs
      : There are experimental ParEdit patches.
         : http://mumble.net/~campbell/tmp/paredit/
         : None look compelling given their experimental nature.

Retired issues with residual notes:
   : Make s a prefix key
      : Define keymap for it.  eg:
         : this keymap would map f to 'delete-other-windows
         : s would be point to that keymap so as 'sf' invokes 'delete-other-windows
      : Figure out what disadvantage there is to mapping "sf" together, if any.
   : All things C-g does C-c should do.
      : Try binding C-c to C-g , see:
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Lookup.html
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting.html
         http://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Modes.html
      : Mapping to keyboard-escape-quit appears to cover most cases, except for quiting with unsaved mods.
      : Try keyboard-translate or key-translation-map
         : An example is described here: http://emacswiki.org/emacs-en/BackspaceKey
   : Using function advice to add prefix to message function.
      : Turns out to not work well in the minibuffer when error messages are written, eg:
         : Searching with evil-search, upon typing the first char that doesn't yield a match.
      : For posterity, the code:
         (defadvice message (before message-add-prefix-advice
                                    (format-string &rest args))
           "Add prefix string to message."
           (let ((format-string-pos 0) (args-pos 1))
             ; Error if I use ad-set-arg.  Maybe because of the documented
             ; "riskiness" of advising primitive functions.
             ;(ad-set-arg (ad-get-arg format-string-pos) (concat "%s" format-string))
             (setq format-string (concat "%s" format-string))
             (setq args (cons (format "%s " (get-time-str)) args))
             ))
         ; Declare args for efficiency of primitive function advising.
         (ad-define-subr-args 'message '(format-string &rest args))
         (ad-activate 'message)
   : Notes about inserting Unicode characters
      : Codes of interest (hex):
         : • is 2022
         : μ is 03bc
         : σ is 03c3
      : Can use function ucs-insert which has key binding C-x 8 RET
      : Can use tex mode:
         : Commands:
            M-x set-input-method
            tex
            \bullet
         : Note: doesn't set the input method back.
   : Notes about the isearch evil-search-module
      : Attempted to make lazy highlighting work
         : Code:
            (setq lazy-highlight-cleanup nil)
            (setq lazy-highlight-max-at-a-time nil)
            (setq lazy-highlight-initial-delay 0)
         : Problems:
            : Doesn't highlight outside of visible area.
      : Attempted to get highlight-regexp to work
         : Code:
            (setq search-highlight nil)
            (setq isearch-lazy-highlight nil)
            ; ...
            (defun my-hi-lock-process-phrase(phrase)
               "My hack of hi-lock-process-phrase function in hi-lock.el . "
               (setq mod-phrase
                      (replace-regexp-in-string
                       "\\<[a-z]" (lambda (m) (format "[%s%s]" (upcase m) m)) phrase))
            )
            (defun my-isearch-exit ()
               (when (boundp 'hi-lock-interactive-patterns)
                  (mapc (lambda (p)
                          (unhighlight-regexp (car p)))
                        hi-lock-interactive-patterns)
               )
               ( setq search-term (car (if isearch-regexp regexp-search-ring search-ring)) )
               (if (equal search-term (downcase search-term))
                  ; Case insensitive
                  (progn
                     ; This is close to interactive highlight-phrase but without the white space rule.
                     (highlight-regexp (my-hi-lock-process-phrase search-term) 'hi-pink)
                  )
                  ; Case sensitive
                  (progn
                     (highlight-regexp search-term 'hi-pink)
                  )
               )
               (lazy-highlight-cleanup t)
            )
            (add-hook 'isearch-mode-end-hook 'my-isearch-exit)
            ; ...
            (defadvice isearch-exit (after my-isearch-exit activate)
               "Go to beginning of match, after isearch, highlight the search term "
               (when isearch-forward (goto-char isearch-other-end))
              (highlight-regexp (car (if isearch-regexp
                                         regexp-search-ring
                                       search-ring)) (find-face 'hi-pink))
            )
         : Problems:
            : highlight-regexp doesn't case-fold the same way.
      : To escape:
         (define-key isearch-mode-map (kbd "C-c") 
            (lambda ()
               (interactive)
               (dotimes (num 2) (isearch-abort))
            )
         )
   : Java Auto Complete
      : Popup causes several seconds of delay.  What's the cause?
         : Try advice in dev's email, generate own smaller set of Java tags.
      : Why is there no popup for ajc-import-class-under-point?
          : auto-complete places text under point.  See mailing list.

