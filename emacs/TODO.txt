Issues:
   : Logging with my-msg
      : Using backtrace-frame is not useful for two reasons:
         : Isn't necessarily the name of the top level function, but a widely used subform calling my-msg
         : Can be a bytecode
      : Could file and line number info go in each backtrace frame?
      : Have it work in Emacs batch run
   : Evil
      : Bug reports: https://bitbucket.org/lyro/evil/issues?reported_by=~epich
         : Updating of highlighted search
            : I find the highlights for my searches with evil-search don't update as I'd expect.  Examples:
               1: [Fixed] Search on a term that appears throughout file.  Hold {{{j}}}.  Search terms will scroll in and out of view without becoming highlighted.
               2: Search for foo: {{{/foo}}}.  Put point over "f", {{{x}}} to delete it.  oo remains highlighted.  Moving around with {{{j}}}, {{{k}}} doesn't update the highlighting.
               3: Similarly, inserting text before "foo" creates incorrect highlighting.  {{{i}}}, type "baz", now "bazfoo" is highlighted.
               4: In Vim, if I search and replace (with {{{:1,$s/old/new/g}}}), then undo, the "old" string is highlighted.  Evil doesn't do that.  In Vim I liked this for verifying complex search and replace operations.
               5: Similarly, in Vim, a search and replace would use the new search term for further {{{n}}}, {{{N}}}.  So {{{:1,$s/old/new/g}}}, then {{{n}}} would go to instances of "old".
      : If I C-c or backspace to beginning of evil-search prompt, I have to wait in order to enter more input.  How to fix?
      : Try Frank's advice: https://bitbucket.org/lyro/evil/issue/279/evil-command-repeats-wrong-commands
         : Declare all commands added to evil-motion-state-map by (eg revert-buffer):
            (evil-declare-ignore-repeat 'revert-buffer)
      : Assess which Evil key bindings need to move from evil-normal-state-map to evil-motion-state-map
         (define-key evil-normal-state-map "y" 'evil-yank)
         (define-key evil-normal-state-map "Y" 'evil-yank-line)
         (define-key evil-normal-state-map "gf" 'find-file-at-point)
         (define-key evil-normal-state-map "gF" 'evil-find-file-at-point-with-line)
         : Email sent to Evil mailing list asking about this.
      : Insert a tab with C-q TAB, using . to repeat doesn't work.
      : Unintented selection when clicking Emacs window in evil-normal-mode
         : https://bitbucket.org/lyro/evil/issue/355/unintented-selection-when-clicking-emacs
   : Increment and decrement numbers in buffer
      : Using evil-numbers, but why should it have anything to do with Evil? Is there a generic package? Perhaps adapt evil-numbers for myself.
   : Kbd macros:
      : So many ways to get an error (sexp navigation commands for example) that abort the kbd macro. How to improve this?
   : Emacs bug:
      : With my font lock settings, auto revert of source code does not cause font lock update until move point
   : delete-pair doesn't work for <> pairs
   : Investigate using emacs 24.4's superword-mode instead of adding '-' to syntax tables
   : Bind C-g to keyboard-quit but with debug-on-quit set to t?
   : Editing Lisp
      : color-parens: minor mode to fontify mismatched parens and parens inconsistent with indentation
         : Two appraochs:
            : Expand JIT region to encompass highest enclosing lists
               : Tried jit-lock-after-change-extend-region-functions, but it is not called for initial read only font locking
               : Tried font-lock-extend-region-functions, but it seems to be called after my registered JIT lock function
            : Fontify in given region, and selectively highlight outside of it
               : Comments in font-lock.el suggest "double-redisplay", don't know if it applies in this case
         : Reference rainbow-delimiters implementation where useful
      : Put point well before {}, delete-pair ("od"), only closing } is deleted
         : Perhaps write a safe-delete-pair?
      : Take a step back and look at my commands and their key bindings
      : adjust-parens:
         : Consider writing adjust-parens-yank function
            : Would do like yank but add close parens to the pasted Lisp code to balance it
            : For example, Copy "(if abc", paste "(if abc)":
               (if abc
                   def
                 ghi)
         : Consider if user deletes misbalanced parens, only the balanced portion is actually deleted
            : Maybe the close parens that survived would move to the end of previous line if necessary?
            : Maybe use after change hooks?
         : When indenting comments, look at if they're ; or ;; and behave accordingly:
            : ) is placed before ;
            : ) is placed on subsequent line after ;; (ie ;; is indented)
         : 2.0 changes broke case of dedenting when line begins with close paren
      : Try evil-paredit
      : Go through ParEdit reference guide and identify the alternatives
      : How to stop Emacs loading Lisp files when visiting them.
   : Keymapping
      : Edebug comes up in normal state.
         : Learn why
         : Give Edebug keymap priority for SPC over Evil.
      : Move key bindings systematically between keymaps
         : Approaches:
            : Preferred approach: Copy all key bindings from one keymap to another with better prefix Key Sequence
               : The key-binding function gets the keymap data structure.
                  : Does not observe Key Translation
            : Key Translation approach, as with C- and C-M- key bindings
            : read-event approach:
               : Does the hyperify example in the Elisp manual's documentation of key-translation-map help?
               : Bind a function to the desired prefix key, read-event, use event-modifiers function to check if control is applied, ...
         : GDB key bindings
            : Change C-x C-a C-<key> to (something convenient (maybe an upper case letter)) then <key>.
               : See http://www.gnu.org/software/emacs/manual/html_node/emacs/Commands-of-GUD.html
            : Compare with Edebug bindings, perhaps mimic key bindings
            : Bind SPC to step when debugger is active.
            : gud-until is busted.
               : Opens up source on other buffer when should use current source code buffer
               : Current execution is steps out, not actually at the until point
      : See here for how to rebind keys that are indistinguishable in the tty:
         http://lists.gnu.org/archive/html/help-gnu-emacs/2013-06/msg00300.html
      : Stefan describes functional keymaps:
         http://article.gmane.org/gmane.emacs.devel/153726
      : Try menu-item :filter trick, for adjust-parens and for my own bindings
         http://lists.gnu.org/archive/html/emacs-devel/2014-01/msg00318.html
         http://lists.gnu.org/archive/html/emacs-devel/2014-01/msg00352.html
   : Key bindings in minibuffer:
      : See Frank Fischer's posting at:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
      : Is there a way to disable electric-pair-mode in the minibuffer?
   : use-package looks useful: https://github.com/jwiegley/use-package
   : Consider freeing up the m key for something like the % command.
   : How to automatically wrap text and code at 80 columns?
      : Auto fill mode?
         : Thought I turned it on, but "Fill" not in modeline.
   : When up arrowing through search history, Vim goes to end of line, Evil beginning.
      : This is consistent with Emacs minibuffer in general.  Investigate
      : Can I use an Evil ex hook for this?  See:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
   : How to mark search terms with different colors?
      : Leverage highlight-regexp or highlight-phrase:
         : Implementation:
            : Would use evil-transform-vim-style-regexp to translate regexp to Emacs style
            : Then feed into one of these highlight- functions.
            : How to clear highlights?
         : Limitations
            : Doesn't case-fold the same way.
      : Use Evil facilities:
         : evil-ex-make-hl makes a highlight object
         : evil-ex-delete-hl to clear them?
      : Submit RFE to Evil for a function analogous to highlight-regexp and highlight-phrase .
   : Configure by project
      : Find project and set my-project-root
      : unihome is not found correctly because of unihome/emacs
      : Set Emacs settings:
         : C coding style
         : Two spaces after period
         : my-offset
   : Debugging
      : Learn Edebug
         : Make it so as space uses the debugger's keybinding instead of Evil, in normal/motion state.  See solution above under "Keymapping".
      : Consider approaches to put *Messages* buffer to file.
         : standard-output variable can be a function that takes one argument: the char to print
         : See also with-output-to-temp-buffer
      : edebug-initial-mode to continue to breakpoint
      : How to send SIGSTOP from the gdb window
      : There are serious bugs when using GDB and there's process output
         : The GDB window inappropriately switches to where execution breaks
         : C-x o buffer-menu then opens buffer-menu in the wrong window
   : Error handling in Elisp
      : Why don't errors have the original backtrace available in some form?
   : Learn about Dired
      : Is there a notion of finding a set of files based on a criteria (search term, use of symbol), then iteratively visiting just those?
         : Need Dired Plus to visit marked files
      : Dired doesn't update when a directory is created separately.  Including when Auto Revert is enabled.
      : Would be nice if I could expand and collapse directories inline, rather than at the bottom of the same buffer, and retain same information.
      : The ^ command is inconvenient to reach, find another key binding.
   : Abolish ChangeLog in Emacs
      : See Stefan's post: http://lists.gnu.org/archive/html/emacs-devel/2013-03/msg00889.html
   : CEDET
      : Cases where semantic-ia-fast-jump doesn't work:
         : Use of std::tr1::shared_ptr
            : Confirm whether true for std::shared_ptr
         : Forward declarations
            : semantic-ia-fast-jump should use ff-find-other-file and use other file's includes, so as forward declarations work better.
         : A variable was defined in a named namespace, then anonymous namespace within that, in a .h file. A user in a .cc file did not find it via semantic-ia-fast-jump, even though .h file was included.
         : In C++, Semantic finds a forward declaration even if the real class is included
         : Does not find tags when 'using namespace' in function scope
      : Investigate completions
         : Disable global-semantic-idle-completions-mode and assign an evil-insert-state or semantic-mode-map key binding
         : semantic-displayor-tooltip seems like the best choice for semantic-complete-inline-analyzer-idle-displayor-class
      : Silly semantic-idle-symbol-highlight highlighting
         : "std" is highlighted when point is on a std namespace token
         : Iff using namespace std, string types are highlighted. But other types like long are not.
         : Perhaps highlight only variables, not namespaces and types?
      : Investigate highlighting symbols with Semantic via command instead of via semantic-idle-symbol-highlight
      : I have found point moves in header files after enabling semantic-idle-symbol-highlight (as of 2013-11-05)
      : Is there a package that uses Semantic to generate static call graphs, similar to cflow?
      : If header files becomes read only, but the buffer permissions aren't up to date, then Semantic prompts the user y/n for each header it visits
      : Semantic is a global minor mode, but what if I don't want it in a particular major mode, such as Python?
      : Have semantic-ia-fast-jump push the location it left
         : See bug#15641: 24.3; [PATCH] Add find-definition for M-.
      : I found a case in Java (with JDEE) where calling semantic-symref seemed to permanently change point in other Java source files
      : bug#15045 Point jumps inappropriately around time of Semantic lexing
      : [cedet-semantic] How does EDE find C++ implementation files
         : http://sourceforge.net/mailarchive/forum.php?thread_name=515CE95C.8010803%40siege-engine.com&forum_name=cedet-semantic
         : Pertains to semantic-analyze-proto-impl-toggle finding the definition from declaration
      : [cedet-semantic] Enhancement request: semantic-ia-fast-jump usability
         : http://sourceforge.net/mailarchive/forum.php?thread_name=CAFM41H0D5rb%3DRGGsR5Bui1B4EQjcznsC-3g4vK324419yngrww%40mail.gmail.com&forum_name=cedet-semantic
         : Followup on Eric's advice for possible solution
      : [cedet-semantic] semantic-ia-fast-jump poor performance in C++ project
         : http://sourceforge.net/mailarchive/forum.php?thread_name=CAFM41H07q7Ek%3D2JgnF%2BBKzyu-Pxpwg9jqvLP2vXafO20SQyDcQ%40mail.gmail.com&forum_name=cedet-semantic
         : Investigate Eric's suggestions for getting EDE to work when calling locate-fcn to get a narrower list of include paths
   : Explore Clang alternatives for C and C++
      : See David Engster's post http://lists.gnu.org/archive/html/emacs-devel/2012-11/msg00528.html
         : https://github.com/Andersbakken/rtags
         : https://github.com/Golevka/emacs-clang-complete-async
   : How to manage includes in C and C++?
      : Ask on mailing list
      : Consider whether CEDET could do it or at least help another package do it
   : GNU Global
      : Based on FAQ, might need to set GTAGSFORCECPP to force .h files to be parsed as C++ instead of C.
      : Is it worth using outside of Semantic commands?
         : Review http://www.wolinlabs.com/blog/emacs.global.speedbar.html
   : Byte compilation:
      : Is there a way to have Emacs emit dependency info for GNU Make when compiling .el into .elc files?
      : Some discussion at: http://lists.gnu.org/archive/html/emacs-devel/2011-05/msg01060.html
      : Related: http://debbugs.gnu.org/cgi/bugreport.cgi?bug=2061
      : If a.el changes and a.elc rebuilt, when does dependent b.el need to rebuild?
         : Y: macro changes definition
         : Y: defsubst changes definition
         : Y/N: defun changes to defsubst (Y for performance, N to correct behavior)
         : N: defconst value changes
         : Y: b.el eval-when-compile clauses use anything from a.el
         : ?: b requires a
            : If a variable in a.el changes name, a new warning may surface compiling b.el, but otherwise byte code stays the same.
      : Emacs signals error if a circular require is encountered
      : load-history may be useful, see eg bytecomp.el's use in byte-compile-file-form-require to find requires of cl
      : How existing Elisp build systems make do:
         : For CEDET, you have to know which .elc, or delete them all
         : Evil greps for require calls
         : In Emacs core, cc-*.el dependencies are listed explicitly
      : See also: http://www.emacswiki.org/emacs/LibraryDependencies
   : Java development
      : Try out emacs-eclim which uses Eclipse as a backend
         http://www.skybert.net/emacs/java/
   : Multi window navigation
      : Set up so as motion commands will go to all windows.
         : Make toggle for on and off.
   : Pretty printing or formatting
      : How to format code with the potential to change across file lines. The = doesn't.
   : Ediff
      : Deficiencies
         : When navigating in non changed regions, other window should navigate automatically in sync.
            : There is v, V, <, > commands, but why shouldn't it integrate with all existing motions?
               : v and V don't even resync the windows if they get out of sync.
         : Highlighting is overkill, hides font locking etc.
            : Can we use indicators in the margin?
               : How to indicate the intra line diffs this way?
                  : Perhaps with underline or bold face?
         : Should open vertically by default.
            : Set custom value, but doesn't work.
               : '(ediff-merge-split-window-function (quote split-window-vertically))
               : Seems ediff-merge-split-window-function is neither a variable nor function.
         : ediff-patch-file alters the file and saves.  What if I just want to preview the patch?
            : Ediff manual suggests ediff-patch-file is the only way.
            : ediff-patch-buffer doesn't work for multi file diffs.
         : Is there a way to forego having another window at all, and I can simply bind useful Ediff commands myself.
   : Try diff-hl in ELPA, highlights changes in VCS
   : Diff mode
      : When navigating hunks, top of hunk displays in the middle of display, even if all of the hunk doesn't show.
         : Can use zt zb commands for now
      : Why not refine all diffs during initialization?
      : Try diff-auto-refine-mode
      : In the diff file, lines '^Only in .*' are not navigated to by diff-file-next and diff-file-prev.
      : bug#15875: 24.3.50; diff-mode counts first column when determining tab width
      : Diff idea threads:
         : http://lists.gnu.org/archive/html/emacs-devel/2013-11/msg00263.html
         : http://lists.gnu.org/archive/html/emacs-devel/2013-11/msg00274.html
   : Builtin undo system:
      : Bugs:
         : Recipe 1:
           • Insert "aaa"
           • Insert "bbb"
           • Undo
           • Insert "ccc"
           • Insert "ddd"
           • Undo
           • Undo-only with prefix arg 2
           • Expected: none of the above insertions are in the buffer
           • Actual: buffer has aaa and bbb insertions
           : Reason: undo-only skips "redo records" prior to calling undo-more through recursive lookup in undo-equiv-table. However, it doesn't reference undo-equiv-table again when it iterates in undo-more, so it may undo redo records after the first correct undo. In this case, it redoes bbb.
         : Recipe 2:
           • Insert "aaa"
           • Insert "bbb"
           • Mark region around "aaa" but not "bbb"
           • Undo (in region)
           • Mark region around "bbb" and where "aaa" used to be
           • Undo-only
           • Expected: none of the above insertions are in the buffer
           • Actual: buffer has aaa and bbb insertions
           : Reason: code appears to simply punt on undo-only in region and behaves like ordinary undo. Thus it undoes the redo record to bring back bbb.
         : Possible solution: for each redo record, store the nodes (plural because of prefix arg) which were undone
            : Possible algorithm when undo-only in region:
               : Foreach nodeI in pending-undo-list:
                  : If nodeI is a redo record:
                     : Remove the referenced undone nodes from pending-undo-list (takes effect immediately for sake of the foreach)
            : This algorithm means that for an undo A of an undo B of an edit C in the region:
               : B will be removed from pending-undo-list
               : The foreach will not process B, so C would remain in pending-undo-list
               : C is correctly picked for undo
         : Enhancements:
            : Why compute the full pending-undo-list in advance instead of lazily?
   : Undo Tree
      : Bugs:
         : Undo in region can hang accessing another node after an undo in region
            : Repro: cc-engine.el j j j j i x x x C-c 0 v j u U u U C-c o v j
            : http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16377
         : Without saving, make a few edits, undo each in their region, buffer is marked * when it shouldn't be, undo tree current node is correct
         : Enable and disable global-undo-tree-mode during startup. I can see Undo Tree inserting undo-tree-canary into undo-equiv-table.
         : Undos are not correct for a test case
            : Steps on Windows 7:
               : Edit in Emacs and save
               : Outside of Emacs, edit earlier in buffer
            : Determine behavior with stock undo.
            : Could not reproduce on RHEL 5, either with stock undo or undo-tree.
      : Enhancements:
         : Visual tree is not as compact as it could be
         : Diffing:
            : Windows: Can't get undo diffs to work
            : Linux: Diff is so slow, I have to customize undo-tree-visualizer-diff to nil.
               : Profiling reveals that diff-no-select function takes up the time.
               : gnulib might have something useful:
                  http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob;f=lib/diffseq.h;hb=HEAD
         : Integrate with builtin undo system, see:
            http://lists.gnu.org/archive/html/gnu-emacs-sources/2009-11/msg00010.html
      : Advantages over builtin
         : intuitive model
         : diff nodes
         : persistent undo history
      : Test undo tree when there is a buffer revert of externally made file changes
   : Learn merging in Git
      : Use magit?
   : Learn about org-mode
   : Buffer Menu
      : Many different buffer menus in core Emacs: buff-menu.el, bs.el, ebuff-menu.el ibuffer.el
      : What's the difference between Buffer Menu and BS?
      : If accidentally his S key:
         : tabulated-list-sort is called to sort by the column at point.
         : Sets tabulated-list-sort-key from its default nil value
         : There is then no interactive command I find to set it back to nil
         : However, kill-buffer works
   : Syntax tables:
      : Need to have _ and - as word characters:
         : Buffer Menu
         : Dired
   : Shell
      : Set --color flag to ls
      : Fix dark blue color for directories
      : See if eshell-command is useful for one-off commands
   : XML editting
      : Surround with tags
         : Some implementations:
            http://stackoverflow.com/questions/2746484/is-there-an-extension-or-mode-in-emacs-similar-to-surround-vim
            http://tech.groups.yahoo.com/group/emacs-nxml-mode/message/1012
      : Search based on XPath
   : electric-pair minor mode
      : Put /** */ in pair list.
      : Remove ' from pair list.  It's annoying in comments with English contractions.
      : There are circumstances when it is annoying when inserting into existing code.
         : Perhaps: insert the closing pair only when there is only whitespace to the end of line.
   : Pair matching
      : Need to be able to use % for <> pairs, "" and '' pairs too.
         : forward-sexp seems to have the knowledge match "" chars.  Understand how.
   : My match-list
      : advise Evil function so as I can use evil-ex to search and replace with cycle-match-list
   : Shift-Enter either:
      : Do a newline or evil-ret while simply Enter to evil-ret-and-indent or newline-and-indent
      : Shift-Enter for escaping Evil insert
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
                  : c-guess does a lot of other things I think, which makes it run long.
      : Perhaps rebind M-DEL to DEL to last tab stop
      : Try out using M-i and restoring TAB to its default binding
      : Using M-<n*my-offset> then SPACE or DEL might be a viable approach
      : Try binding tab-to-tab-stop to indent-line-function.
         : Could obstruct completion with current indent.el code.
   : Indentation:
      : Given (| indicates point):
            foo, // blah
            a, |
        Shouldn't M-; result in:
            foo, // blah
            a,   // |
        (// is aligned)
   : Consider Stefan's settings for anything useful
      https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-06/msg00539.html
   : Improve Emacs initialization
      : Learn about emacs as a server and client
      : See if there's a better way to ensure essential commands are available in the presence of other init errors
         : See http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Errors
   : Figure out how to (setq-default major-mode 'text-mode) with out conflicting with Evil's (setq-default major-mode 'turn-on-evil-mode)
   : Finding location of .emacs.d
      : See thread: http://lists.gnu.org/archive/html/help-gnu-emacs/2012-10/msg00467.html
   : Automated tests
      : Run individual tests
         : Followup on Kenichi Handa's patch: http://lists.gnu.org/archive/html/emacs-devel/2013-08/msg00731.html
   : Pick through the elisp of others:
      : Michael Markert's:
         https://github.com/cofi/dotfiles/blob/master/emacs.d/config/cofi-evil.el
   : Read the Elisp manual:
      : Debugging
      : Marks
   : Read the Emacs manual:
      : Killing and Moving Text
         : Learn about the kill ring and registers
      : Amusements
   : Mailing list:
      : Read the email thread founding Evil:
         http://thread.gmane.org/gmane.emacs.vim-emulation/692
   : Other reading:
      Thorough GDB guide: http://www.dirac.org/linux/gdb/
   : Can Elisp macros use Xpaths to modify code?
   : How to distribute strings?
      : Stackoverflow:
         : URL:
            http://stackoverflow.com/questions/13962720/how-to-distribute-strings-in-emacs-or-vim
      : Further work:
         : Convert Evil regexp to Emacs regexp
         : Evil does not call replace-regexp, so need to also defadvice the appropriate Evil function.
         : Note: Evil's search and replace supports the \, feature.
