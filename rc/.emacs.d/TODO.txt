Issues:
   : Assess which Evil key bindings need to move from evil-normal-state-map to evil-motion-state-map
      (define-key evil-normal-state-map "y" 'evil-yank)
      (define-key evil-normal-state-map "Y" 'evil-yank-line)
      (define-key evil-normal-state-map "gf" 'find-file-at-point)
      (define-key evil-normal-state-map "gF" 'evil-find-file-at-point-with-line)
   : Redefine tag navigation to use q and Q instead of t and T
      : Don't need Evil's keyboard macros, Emacs's keyboard macros seem sufficient.
      : Will make prefix key navigation with 1q easier than 1t
   : Backspace to tab stop backward-delete-whitespace-to-tab-stop
      : Doesn't correctly handle backspace when there's a selection.
         : Snag with solution:
            : Go into insert mode
            : Shift select text
            : C-h k verifies backspace calls backward-delete-char-untabify
            : Works:
               : Hit Backspace key when .emacs bound it to backward-delete-char-untabify
            : Does not work:
               : M-x backward-delete-char-untabify
            : Does not work:
               : Hit backspace key when .emacs bound it to backspace-whitespace-to-tab-stop
   : If I C-c or backspace to beginning of evil-search prompt, I have to wait in order to enter more input.  How to fix?
   : Evil bugs:
      : After revert-buffer, the . command doesn't remember
      : Can't do: v /search-term
         : Text doesn't highlight to search term
   : Editing Lisp
      : Syntax highlighting:
         : Pairs of parens in different colors, bottom up from point
            : See code samples at: http://community.schemewiki.org/?scheme-faq-language
            : Perhaps extend paren (which provides show-paren-mode)?
               : paren.el looks fairly simple.
               : Uses overlays
            : Perhaps extend hi-lock (which provides highlight-regexp)
               : Uses font lock
            : Perhaps extend Rainbow Delimiters
               : Colors from top down.
               : Uses font lock
                  : Presumably because it highlights parens throughout the buffer
                  : Perhaps also because coloring doesn't change when point moves
      : Editing:
         : How to make insert-pair useful?
            : Iterate through insert-pair-alist and define eg:
               : o(
               : o[
               : o{
               : o<
               : o"
               : o'
         : Take a step back and look at my commands and their key bindings
      : Notes:
         : List and sexp navigation
            forward-list
               It is bound to C-M-n.
            backward-list
               It is bound to C-M-p.
            down-list
               It is bound to <C-M-down>, C-M-d.
            backward-up-list
               It is bound to <C-M-up>, C-M-u.
            up-list
               No binding.
            forward-sexp
               It is bound to <C-M-right>, C-M-f.
            backward-sexp
               It is bound to <C-M-left>, C-M-b.
         : Editing:
            : 1oj to surround the next 1 sexp
      : Automatically balance space between parens.
      : How to stop Emacs loading Lisp files when visiting them.
   : Keymapping
      : Edebug comes up in normal state.
         : Learn why
         : Give Edebug keymap priority for SPC over Evil.
      : Move key bindings systematically between keymaps
         : Approaches:
            : Preferred approach: Copy all key bindings from one keymap to another with better prefix Key Sequence
               : The key-binding function gets the keymap data structure.
                  : Does not observe Key Translation
            : Key Translation approach, as with C- and C-M- key bindings
            : read-event approach:
               : Does the hyperify example in the Elisp manual's documentation of key-translation-map help?
               : Bind a function to the desired prefix key, read-event, use event-modifiers function to check if control is applied, ...
         : GDB key bindings
            : Change C-x C-a C-<key> to (something convenient (maybe an upper case letter)) then <key>.
               : See http://www.gnu.org/software/emacs/manual/html_node/emacs/Commands-of-GUD.html
            : Compare with Edebug bindings, perhaps mimic key bindings
            : Bind SPC to step when debugger is active.
   : Key bindings in minibuffer:
      : See Frank Fischer's posting at:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
      : Is there a way to disable electric-pair-mode in the minibuffer?
   : Consider freeing up the m key for something like the % command.
   : How is emacs-startup-hook different from term-setup-hook?
   : How to automatically wrap text and code at 80 columns?
      : Auto fill mode?
         : Thought I turned it on, but "Fill" not in modeline.
   : When up arrowing through search history, Vim goes to end of line, Evil beginning.
      : This is consistent with Emacs minibuffer in general.  Investigate
      : Can I use an Evil ex hook for this?  See:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
   : C-c bug:
      : Occasionally I get to a state which looks like insert, but has a C-c mapping for keyboard-quit.
   : How to mark search terms with different colors?
      : Leverage highlight-regexp or highlight-phrase:
         : Implementation:
            : Would use evil-transform-vim-style-regexp to translate regexp to Emacs style
            : Then feed into one of these highlight- functions.
            : How to clear highlights?
         : Limitations
            : Doesn't case-fold the same way.
      : Use Evil facilities:
         : evil-ex-make-hl makes a highlight object
         : evil-ex-delete-hl to clear them?
      : Submit RFE to Evil for a function analogous to highlight-regexp and highlight-phrase .
   : Debugging
      : Learn Edebug
         : Make it so as space uses the debugger's keybinding instead of Evil, in normal/motion state.  See solution above under "Keymapping".
      : Consider approaches to put *Messages* buffer to file.
   : Learn about Dired
      : Is there a notion of finding a set of files based on a criteria (search term, use of symbol), then iteratively visiting just those?
         : Need Dired Plus to visit marked files
      : Dired doesn't update when a directory is created separately.  Including when Auto Revert is enabled.
      : Would be nice if I could expand and collapse directories inline, rather than at the bottom of the same buffer, and retain same information.
      : The ^ command is inconvenient to reach, find another key binding.
   : JDEE
      : Hack to use CEDET in Emacs
   : CEDET 1.1
      : Display in minibuffer undermines promptings and my ability to read them.
      : Symbol reference -- where is a symbol used or called?
      : Jumping to definition
         : Type 
         : Symbol
         : Function
      : Backtrack from jumping
         : Ideally my place would be saved automatically
         : If not, Emacs and Evil likely offer a manual way to set my location to return to later.
      : Highlight symbol where point is, and stay highlighted as I move around.
      : Manage includes
      : Switch between .h and .cpp
         : Investigate eassist
         : semantic-analyze-proto-impl-toggle
         : Split display the two?
      : Have function prototype and docs display, whether as tooltip or in other buffer.
      : UML diagrams
         : From a set of files, how do I generate:
            : Dependancy graph
            : Composition graph
            : Inheritance graph
   : CEDET 2.0 r8498 from upstream bzr trunk
      : Look into some of the other submodes to add to semantic-default-submodes
      : Make it so as we only call ede-cpp-root-project when actually opening a C or C++ file (remember .h is deemed as C)
      : How does the project know about .cc files?
      : Should I put goesr-dev.el in unihome or IPT_PG/Dev source control?
      : Get CEDET Java working with managing imports and symbol jumping, then rip out cedet-1.1 and jdee altogether
      : Semantic is slow to to go declaration with semantic-ia-fast-jump .
         : Try Alex Ott's advice at http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html
         : Investigate semanticdb-create-*
         : Try turning on semantic submodes to get more information about internals
         : When I restart Emacs, the first semantic-ia-fast-jump on the same symbol is slow again, taking 45s
         : Tried without my prog-mode and c-common-mode hooks and saw no appreciable speedup.
      : Figure out how to generate semanticdb for the whole source tree in advance
      : semanticdb-project-roots is nil.  Shouldn't my project be there?
         : This returns the right root directory:
            (ede-toplevel-project-or-nil "/psd15/linux/boreilly/cc/l0int/vobs/goes_r_dev/Software_Engineering/IPT_PG/Dev/src/L1Processing/SEISS_L1b/SEISS_CommonUtilities/src")
      : Find key bindings for:
         : Commands:
            semantic-c-describe-environment
            semantic-show-summary
            semantic-ia-fast-jump
            semantic-analyze-proto-impl-toggle
         : Should I add it to semantic-mode-map so as I can use it with t key translation?
      : How to manage includes?
      : If a class name is not namespace scoped correctly, semantic-ia-fast-jump won't jump to it.  How to find right namespace using semantic?
      : Try out GNU Global
         : http://www.wolinlabs.com/blog/emacs.global.speedbar.html
         : Based on FAQ, might need to set GTAGSFORCECPP to force .h files to be parsed as C++ instead of C.
      : Request semantic-ia-fast-jump usability enhancement:
         : When doing semantic-ia-fast-jump on a variable, it may take me to eg Namespace::Class with point before Namespace.  I have to move cursor to Class to do another semantic-ia-fast-jump .  Perhaps provide customization that moves point to Class rather than to Namespace.
   : Multi window navigation
      : Set up so as motion commands will go to all windows.
         : Make toggle for on and off.
   : Ediff
      : Deficiencies
         : When navigating in non changed regions, other window should navigate automatically in sync.
            : There is v, V, <, > commands, but why shouldn't it integrate with all existing motions?
               : v and V don't even resync the windows if they get out of sync.
         : Highlighting is overkill, hides font locking etc.
            : Can we use indicators in the margin?
               : How to indicate the intra line diffs this way?
                  : Perhaps with underline or bold face?
         : Should open vertically by default.
            : Set custom value, but doesn't work.
               : '(ediff-merge-split-window-function (quote split-window-vertically))
               : Seems ediff-merge-split-window-function is neither a variable nor function.
         : ediff-patch-file alters the file and saves.  What if I just want to preview the patch?
            : Ediff manual suggests ediff-patch-file is the only way.
            : ediff-patch-buffer doesn't work for multi file diffs.
         : Is there a way to forego having another window at all, and I can simply bind useful Ediff commands myself.
   : Diff mode
      : When navigating hunks, top of hunk displays in the middle of display, even if all of the hunk doesn't show.
         : Can use zt zb commands for now
      : Why not refine all diffs during initialization?
      : In the diff file, lines '^Only in .*' are not navigated to by diff-file-next and diff-file-prev.
   : Undo Tree
      : Update version to see if issues below still exist.
      : Have a different character in the visual tree indicate the last save point
      : Visual tree is not as compact as it could be
      : Maybe set up undo-tree-auto-save-history to put undo history in ~/emacs-backup
      : Diffing:
         : Windows: Can't get undo diffs to work
         : Linux: Diff is so slow, I have to customize undo-tree-visualizer-diff to nil.
            : Profile the problem and re enable.
            : gnulib might have something useful:
               http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob;f=lib/diffseq.h;hb=HEAD
      : Bug with inserting redos in wrong place:
         : Left Emacs sitting for several days, reverted buffer, did redo, redo was inserted into wrong part of buffer
         : Try to reproduce.  If I can't, remove this TODO item.  If I can, see if bug exists without Undo Tree.
      : Behaves incorrectly when: unsaved changes, revert-buffer, overrite unsaved changes.  All previous undo states are consequently hosed.
   : Learn merging in Git
      : Use magit?
   : Learn about org-mode
   : Buffer Menu
      : What's the difference between Buffer Menu and BS?
      : If accidentally his S key:
         : tabulated-list-sort is called to sort by the column at point.
         : Sets tabulated-list-sort-key from its default nil value
         : There is then no interactive command I find to set it back to nil
         : However, kill-buffer works
   : Being prompted about running Python process is annoying.
      : CEDET starts it for sake of auto completion.
   : Smart editing:
      : Need to specify how many tabs to continue code lines with.
         : Done for Python (as much as can be)
         : Do for C like languages
         : Do for XML
   : XML editting
      : Surround with tags
         : Some implementations:
            http://stackoverflow.com/questions/2746484/is-there-an-extension-or-mode-in-emacs-similar-to-surround-vim
            http://tech.groups.yahoo.com/group/emacs-nxml-mode/message/1012
      : Search based on XPath
   : electric-pair minor mode
      : Put /** */ in pair list.
      : Remove ' from pair list.  It's annoying in comments with English contractions.
      : There are circumstances when it is annoying when inserting into existing code.
         : Perhaps: insert the closing pair only when there is only whitespace to the end of line.
   : Double click select:
      : Need to be able to double click a file path and have it select all of it.
      : Double clicking a / char selects up to the . (exclusive).
      : Hacking syntax tables looks like the canonical and most generalized solution:
         http://emacswiki.org/emacs/EmacsSyntaxTable
      : A targetted way to hack this just for mouse clicking:
         : http://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00015.html
         : Would be good to pursue if hacking the syntax table is more generalized than I find I want.
      : Relevant, but not particularly helpful:
         http://stackoverflow.com/questions/9595277/emacs-xterm-mouse-mode-double-click-to-highlight-word
      : Double clicking a / char in Evil states no longer works, does work in Emacs state.
         : Bisect the Evil repo to determine the guilty changeset.
   : Pair matching
      : Need to be able to use % for <> pairs, "" and '' pairs too.
         : forward-sexp seems to have the knowledge match "" chars.  Understand how.
   : Automatic scrolling:
      : Advised evil-window-top and evil-window-bottom to set scroll-conservatively to 101
         : Doesn't seem work, even though log-msg in Evil shows scroll-conservatively is set
      : scroll-down-aggressively scroll-up-aggressively
         : Look useful
         : Emacs manual states these are ignored if scroll-conservatively is set to non zero.  Fix this?
            http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Scrolling.html
      : Find command for keeping point where it is, but vertically centering it in the display.
   : Syntax tables:
      : Change - and _ so as motion over variable names and such work better.
      : Have double clicking work better (see above).
   : Frame's title
      : Set title to include host and directory (after file's basename)
      : Set title for Untitled buffers.
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
                  : c-guess does a lot of other things I think, which makes it run long.
               : elisp initialization:
                  ;;; Initialize cc-mode
                  ;;
                  ;; cc-mode is distributed with Emacs, but using a newer version in order to get 
                  ;; style guessing.
                  (add-to-list 'load-path "~/.emacs.d/cc-mode")
   : Improve Emacs initialization
      : Learn about emacs as a server and client
      : See if there's a better way to ensure essential commands are available in the presence of other init errors
         : See http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Errors
   : Figure out how to (setq-default major-mode 'text-mode) with out conflicting with Evil's (setq-default major-mode 'turn-on-evil-mode)
   : Finding location of .emacs.d
      : See thread: http://lists.gnu.org/archive/html/help-gnu-emacs/2012-10/msg00467.html
      : Try: using --eval flag with an ordinary load of init.el .  Verify correct behaviors result.
   : Would like to pipe output of shell command to Emacs for display
      : See https://github.com/lewang/e-sink
   : Pick through the elisp of others:
      : Michael Markert's:
         https://github.com/cofi/dotfiles/blob/master/emacs.d/config/cofi-evil.el
   : Read the Elisp manual:
      : Debugging
      : Marks
   : Read the Emacs manual:
      : Killing and Moving Text
         : Learn about the kill ring and registers
      : Amusements
   : Mailing list:
      : Read the email thread founding Evil:
         http://thread.gmane.org/gmane.emacs.vim-emulation/692
   : Other reading:
      Thorough GDB guide: http://www.dirac.org/linux/gdb/
   : Can Elisp macros use Xpaths to modify code?
   : How to distribute strings?
      : Stackoverflow:
         : URL:
            http://stackoverflow.com/questions/13962720/how-to-distribute-strings-in-emacs-or-vim
      : Further work:
         : Convert Evil regexp to Emacs regexp
         : Evil does not call replace-regexp, so need to also defadvice the appropriate Evil function.
         : Note: Evil's search and replace supports the \, feature.
   : Emacs encoding bug:
      : Put in file:
         <?xml version="1.0" encoding="UTF-16"?>
      : Displays gibberish because of UTF-16, even in fundamental mode.  I could maybe understand this in nxml mode.

Evil bugs (submitted):
   : Updating of highlighted search
      : I find the highlights for my searches with evil-search don't update as I'd expect.  Examples:
         1: Search on a term that appears throughout file.  Hold {{{j}}}.  Search terms will scroll in and out of view without becoming highlighted.
         2: Search for foo: {{{/foo}}}.  Put point over "f", {{{x}}} to delete it.  oo remains highlighted.  Moving around with {{{j}}}, {{{k}}} doesn't update the highlighting.
         3: Similarly, inserting text before "foo" creates incorrect highlighting.  {{{i}}}, type "baz", now "bazfoo" is highlighted.
         4: In Vim, if I search and replace (with {{{:1,$s/old/new/g}}}), then undo, the "old" string is highlighted.  Evil doesn't do that.  In Vim I liked this for verifying complex search and replace operations.
         5: Similarly, in Vim, a search and replace would use the new search term for further {{{n}}}, {{{N}}}.  So {{{:1,$s/old/new/g}}}, then {{{n}}} would go to instances of "old".
      : Bug submitted to Evil project.
         : Issue 1 was solved with a defcustom.
   : In Evil motion state, can't mouse click buttons.  RET works however.
   : Selecting only part of line and doing s/  */\n/g replaces whole line, including outside of selection.
      : Vim behaves similarly.
