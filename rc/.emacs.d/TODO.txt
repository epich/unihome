Issues:
   : = key binding
      : Have = trim trailing whitespace in the selected region.
         : Use the whitespace-* elisp functions.
         : Someone patched delete-trailing-whitespace to delete within region if active:
            : URL: http://lists.gnu.org/archive/html/emacs-devel/2011-02/msg00432.html
            : Available in Emacs 24.1
            : Should prefer the whitespace elisp functions unless they don't work out.
   : Have the p command paste and do a ==
      : Make this conditional on the line pasting to is whitespace only.
      : Perhaps file bug about pasting with 'p' on lines with no chars.  A space char is effectively created.
      : Either way, when fixed, undo p and P swapping in evil-normal-state-map .
   : Backspace to tab stop backward-delete-whitespace-to-tab-stop
      : Doesn't correctly handle backspace when there's a selection.
         : Snag with solution:
            : Go into insert mode
            : Shift select text
            : C-h k verifies backspace calls backward-delete-char-untabify
            : Works:
               : Hit Backspace key when .emacs bound it to backward-delete-char-untabify
            : Does not work:
               : M-x backward-delete-char-untabify
            : Does not work:
               : Hit backspace key when .emacs bound it to backspace-whitespace-to-tab-stop
   : Screen flashing:
      : When finished with a cycle of search in a file
   : Disconnect about Emacs' notion of where point is:
      : Official definition of point is between chars, cursor displayed over the next char.
         : Uses this definition:
            : ParEdit commands of interest
            : Emacs commands for navigating sexp
      : There's an over-char abstraction, more intuitive based on display of cursor.
         : Uses this abstraction:
            : Evil
            : show-paren-mode
      : Ask on Emacs mailing list about this topic.
         : Is there reason to have a defcustom for those that wish the alternate abstraction?
      : Study how Evil copes with this.
         : See comment block in evil-commands.el "Text objects"
         : evil-define-motion type inclusive/exclusive looks relevant.
         : Ask on Evil mailing list about approaches for dealing with this.
   : Figure out how to edit elisp code efficiently.
      : Cope with official definition of where point is.
         : Extend, wrap, advise, or replace functions for which I want the over-char abstraction.
            : ParEdit commands of interest
            : Emacs sexp commands
      : Have editing functions operate on an sexp when point is within it.
      : Syntax highlighting:
         : Highlight text based on its level in the sexp tree, from point to the root.
            : pairs of parens in different colors.
               : Perhaps extending paren (which provides show-paren-mode) is doable.  paren.el looks fairly simple.
                  : Checkout the bzr revision history, how frequent, who edits it?
            : pairs of parens, including within them, in different colors.
               See code samples at: http://community.schemewiki.org/?scheme-faq-language
      : ParEdit
         : Issues:
            : paredit-wrap-around (bound to sej) doesn't do as expected when there's active region.
               Example:
                  (list 'quote (cons nil nil ))
                  ; Select: (co
                  ; Execute function, code becomes: (list 'quote (co () ns nil nil ))
                  ; Expected: (list 'quote ((cons nil nil )))
                     : Same as if just the ( was selected, but you have more of the sexp selected.
                  ; Less ideal, but better: (list 'quote ((co)ns nil nil ))
            : paredit-splice-sexp (bound to sek) doesn't do as expected when there's active region.
         : Email developer:
            : Ask about whether he is maintaining, referring to comment in blag.txt
            : Ask why it's not on GitHub.
            : Point out bugs described above (not location of point issue).
            : Ask about syntax highlighting.
         : Developer
            : campbell@mumble.net
            : Blog: http://mumble.net/~campbell/blag.txt
      : Automatically balance space between parens.
   : Keyboard macros
      : Weird bug:
         : In scratch buffer, in one insertion, create, left justified:
            a
            b
            c
            a
            b
            c
            a
            b
            c
         : Use the Emacs style kbdmacro to consolidate into three lines of "a b c".
         : Hit 'u' for undo.
         : Entire contents of scratch disappear, including the top default comments.
      : Does Evil's keyboard macro ('q') integrate better with the undo system?
      : Eliminate [ and ] as Evil prefix keys.  I wish to bind them to C-x ( and C-x )
   : Updating of highlighted search
      : I find the highlights for my searches with evil-search don't update as I'd expect.  Examples:
         1: Search on a term that appears throughout file.  Hold {{{j}}}.  Search terms will scroll in and out of view without becoming highlighted.
         2: Search for foo: {{{/foo}}}.  Put point over "f", {{{x}}} to delete it.  oo remains highlighted.  Moving around with {{{j}}}, {{{k}}} doesn't update the highlighting.
         3: Similarly, inserting text before "foo" creates incorrect highlighting.  {{{i}}}, type "baz", now "bazfoo" is highlighted.
         4: In Vim, if I search and replace (with {{{:1,$s/old/new/g}}}), then undo, the "old" string is highlighted.  Evil doesn't do that.  In Vim I liked this for verifying complex search and replace operations.
         5: Similarly, in Vim, a search and replace would use the new search term for further {{{n}}}, {{{N}}}.  So {{{:1,$s/old/new/g}}}, then {{{n}}} would go to instances of "old".
      : Bug submitted to Evil project.
         : Issue 1 is resolved by changing evil-ex-hl-idle-update function's call to run-at-time, using 0.01 instead of 0.1.
         : If it's not incorporated into Evil, look into putting the git repo under unihome and use a local patch.
            : See Linus' description of this kind of git workflow.
   : Evil prevents quitting Emacs from recursive edit when . repeating with repeat-ring under certain conditions:
      : See my email to the mailing list: Confused by what command is "dot repeatable"
      : Submitted bug report to Evil project.
   : Keymapping
      : Edebug comes up in normal state.
         : Learn why
         : Give Edebug keymap priority for SPC over Evil.
      : Create function that generates all of the key-translation-map additions for C- keys.
      : The key translation approach can make some key sequences inaccessible if defined in other keymaps.
         : Is there a way to use read-event function, which is known to not reference key-translation-map?
         : Is there an ideal way to circumvent the key-translation-map?
         : Control whether additions to key-translation-map are active.
            : Are there supported ways in Emacs?
            : Use the Evil state hooks.
               : Problematic -- switching between buffers in different states doesn't run the hooks.
         : Have key-translation-map map to function which:
            : Returns translation if in normal, motion, visual states
            : Else returns the same key.
               : How does the bound function determine the original key?
               : Perhaps use a macro or function to generate the function to bind to.
               : Wrote a function that attempts to do this, doesn't work yet.
                  : Problem, submitted to help-gnu-emacs
                     http://lists.gnu.org/archive/html/help-gnu-emacs/2012-07/msg00345.html
                  : Submitted to bug-gnu-emacs
                  : Might need to (setq lexical-binding t) in my .emacs in order to generate the closure that the code relies on.
         : Xah Lee reports bug with universal argument and key-translation-map
            https://groups.google.com/forum/?fromgroups#!topic/comp.emacs/p7PLJgWzNkY
   : Key bindings in minibuffer:
      : See Frank Fischer's posting at:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
      : Is there a way to disable electric-pair-mode in the minibuffer?
   : When up arrowing through search history, Vim goes to end of line, Evil beginning.
      : This is consistent with Emacs minibuffer in general.  Investigate
      : Can I use an Evil ex hook for this?  See:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
   : C-c bug:
      : Occasionally I get to a state which looks like insert, but has a C-c mapping for keyboard-quit.
   : How to mark search terms with different colors?
      : Submit RFE to Evil for a function analogous to highlight-regexp and highlight-phrase .
      : Need Evil analog to highlight-regexp and highlight-phrase
      : Look more at evil-ex-make-hl
      : Need a way to clear them.  evil-ex-delete-hl perhaps.
   : Repeat . command issues:
      : Pasting text into Emacs isn't recorded to repeat ring.
         : Bug report submitted to Evil project.
   : File reloading:
      : Figure out how to make reloading a file from disk less annoying.
         : It would be good to have similar abstraction as Vim:
            : When leaving file that is unsaved, prompt the user.  Allow for an override.
            : When visiting a file, reload it from disk.
      : A solution to this should also solve Clearcase checkout annoyances.  clearcase.el slows down init.
      : auto-revert
         : Doesn't revert file permissions, even though revert-buffer does.
            : Submitted bug report to GNU, ID 11549, merged with ID 11412.
            : Notes on the code:
               : Manual revert:
                  : revert-buffer is in files.el
                  : auto-revert-handler is in autorevert.el
                  : revert-buffer calls (after-find-file nil nil t nil preserve-modes) which appears to set the perms.
                  : Emacs shows the updated perms when after-find-file executes: (setq buffer-read-only (not (file-writable-p buffer-file-name)))
               : Auto revert:
                  : auto-revert-handler has letted revert var for whether to revert.
                  : Calls revert-buffer to revert.
                     : Calls after-find-file
                        : In debugger, the permissions change!
                        : But running the same test not in the debugger, permissions don't change.
                  : Try copying code, then placing log-msg statements.
         : Has high latency
            : Might be configurable
         : Flash screen when auto revert occurs.
      : revert-buffer invocation
         : Perhaps when start viewing buffer
            : Investigate using window-scroll-functions for this.
               : See http://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Hooks.html
               : Tried copying Evil's example for using window-scroll-functions, but can't get my-window-scroll invoked.
                  (defun my-window-scroll
                    (log-msg "Inside my-window-scroll"))
                  (add-hook 'window-scroll-functions 'my-window-scroll nil t)
         : Consider whether I'm ok with losing undo history.  Maybe make it conditional for the need to revert.
   : Learn the debugger
      : Evil bug when exiting debugger, submitted bug report.
      : Make it so as space uses the debugger's keybinding instead of Evil, in normal/motion state.  See solution above under "Keymapping".
   : Look into using undo-tree extension.
   : Learn about Dired
      : Is there a notion of finding a set of files based on a criteria (search term, use of symbol), then iteratively visiting just those?
   : Learn about CEDET
      : Notes:
         : EDE:
            : Sets up project.
            : Can be used to restrict search space for Semantic.
         : Semantic
            : Smart Help/Jump (show info and jump to definition)
            : Symbol References (where is a symbol referenced)
            : Smart completion: (require 'semantic-ia)
            : Know about system headers: (require 'semantic-gcc)
               : Also: (semantic-add-system-include "~/exp/include/boost_1_37" 'c++-mode)
         : COGRE
            : UML diagrams (Cogre)
         : Reference "gentle introduction": http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html
      Issues:
         : Display in minibuffer undermines promptings and my ability to read them.
      Needs:
         : Symbol reference -- where is a symbol used or called?
         : Jumping to definition
            : Type 
            : Symbol
            : Function
         : Backtrack from jumping
            : Ideally my place would be saved automatically
            : If not, Emacs and Evil likely offer a manual way to set my location to return to later.
         : Highlight symbol where point is, and stay highlighted as I move around.
         : Manage includes
         : Switch between .h and .cpp
            : Investigate eassist
            : semantic-analyze-proto-impl-toggle
            : Split display the two?
         : Have function prototype and docs display, whether as tooltip or in other buffer.
         : UML diagrams
            : From a set of files, how do I generate:
               : Dependancy graph
               : Composition graph
               : Inheritance graph
   : Learn about VCS use
      : Ediff
         : Submit patch to Evil to include 'ediff-meta-mode in evil-motion-state-maps.
            : Use opportunity to ask about how to push directly to project.
         : Figure out a good way to apply motion commands to both windows.
            : Perhaps rebind Ediff's commands selectively, particular v and V commands
            : Perhaps use a prefix key to access Ediff's keymap
               : Maybe a capital letter, so as I can put caps lock and still use my ; and ' motion commands.
            : Or take a more generalized approach for applying motion commands to all displayed windows
         : Customize to open vertically split
            : Set custom value, but doesn't work
         : \| doesn't work sometimes at first when entering an Ediff session.
            : Seems doing C-z puts me back in motion state after this happens.
            : Submitted bug report.
         : ediff-patch-file applies the patch and saves the file, even if file is read only (and owned by me)
            : How to not have it apply patch until I save (this would seem to be most sensible)?
      : How to do merges
   : Learn about org-mode
   : buffer-menu
      : Display full file basename or at least widen column width.
      : Learn more about it
   : Being prompted about running Python process is annoying.
      : CEDET starts it for sake of auto completion.
   : Smart editing:
      : Need to specify how many tabs to continue code lines with.
         : Done for Python (as much as can be)
         : Do for C like languages
         : Do for XML
   : electric-pair minor mode
      : Put /** */ in pair list.
      : Remove ' from pair list.  It's annoying in comments with English contractions.
      : There are circumstances when it is annoying when inserting into existing code.
         : Perhaps: insert the closing pair only when there is only whitespace to the end of line.
   : Double click select:
      : Need to be able to double click a file path and have it select all of it.
      : Double clicking a / char selects up to the . (exclusive).
      : Hacking syntax tables looks like the canonical and most generalized solution:
         http://emacswiki.org/emacs/EmacsSyntaxTable
      : A targetted way to hack this just for mouse clicking:
         : http://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00015.html
         : Would be good to pursue if hacking the syntax table is more generalized than I find I want.
      : Relevant, but not particularly helpful:
         http://stackoverflow.com/questions/9595277/emacs-xterm-mouse-mode-double-click-to-highlight-word
   : Syntax highlighting:
      : Not keen on (in Python) strings and comments getting a similar color.
   : Cursor position is difficult to discern over highlighted areas.
   : Make Emacs state visually obvious.  Ideas:
      : Have Emacs state be black fg on white bg
      : Have the status line be a different color based on evil state.
         (set-face-background 'modeline "Blue")
         Use hooks
      : Could also set color of cursor instead:
         See http://permalink.gmane.org/gmane.emacs.vim-emulation/1170
   : Get % to match <> such as in C++ or Java.
   : Frame's title
      : Set title to include host and directory (after file's basename)
      : Set title for Untitled buffers.
   : How to toggle display of line wrapping?
   : Visual mode
      : Bug:
         : Select text with v
         : Select different text with mouse
         : Both are highlighted, but y will only yank the second.
         : Report submitted to project.
      : Bug:
         : Select with mouse, char under point is not highlighted, but it is with v selection.
         : Report submitted to project.
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
                  : c-guess does a lot of other things I think, which makes it run long.
               : elisp initialization:
                  ;;; Initialize cc-mode
                  ;;
                  ;; cc-mode is distributed with Emacs, but using a newer version in order to get 
                  ;; style guessing.
                  (add-to-list 'load-path "~/.emacs.d/cc-mode")
   : Figure out what the debris files Emacs leaves behind are about, and whether to change settings to not create them.
      : Determined what they are.
      : Decide if I want to place them under a dir in my home.
   : Opening through symlinks in an hg repo is slow by a factor of about 5.
   : Logging
      : Is there a way to get the current function's name, in order to put in log-msg prefix.
   : Organize and optimize Emacs lisp init code.
      : Move most of .emacs code to .el files and build it with the others.
      : Links:
         : Optimization: http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips
         : Optimization: http://www.emacswiki.org/emacs/OptimizingEmacsStartup
         : Optimization: http://stackoverflow.com/questions/778716/how-can-i-make-emacs-start-up-faster/779145#779145
      : Create error handling such that a single failure doesn't abort my init.
         : See http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Errors
      : Write code which automates benchmarking a bit better.
         : If the elisp manual link above is insufficient:
            : Elisp:
               : Have the elisp measure the time elapsed from start of .emacs to end of term-setup-hook.
               : Maybe output result to stdout to facilitate analyzing multiple runs of Emacs.
                  : For printing to stdout, might be helpful:
                     http://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html
            : Maybe need a higher Python script to
               : start up Emacs multiple times
               : discard the first run in case there's any caching or byte compiling that occurs.
   : Pick through the elisp of others:
      : Michael Markert's:
         https://github.com/cofi/dotfiles/blob/master/emacs.d/config/cofi-evil.el
   : Read the Elisp manual:
      : Debugging
      : Marks
   : Read the Emacs manual:
      : Killing and Moving Text
         : Learn about the kill ring and registers
      : Amusements
   : Mailing list:
      : Read the email thread founding Evil:
         http://thread.gmane.org/gmane.emacs.vim-emulation/692
   : EmacsWiki contributions:
      : Write a section in the EmacsWiki for managing keymappings with Evil
         : Prereqs:
            : Write code to copy from evil-emacs-state-modes to evil-motion-state-maps
            : Write Evil state hooks to set and unset key translation mappings
            : Does the \ command run the Evil state hooks?
               : Looks like the answer is yes in code
               : Verify through manual testing
            : Try it all out to be sure
         : Outline:
            : Basics:
               : Setting
               : Unsetting
               : Conflicts between motion and normal
               : Unset a key before making it a prefix key
            : Key Translation approach
               : Set and unset in Evil state hooks
               : Conflicts with key bindings of other modes
            : Buffers with no raw text editing
            : Motion vs normal states
            : Moving evil-emacs-state-modes to evil-motion-state-modes
            : Setting evil-overriding-maps and evil-intercept-maps to nil
            : Moving key bindings from motion to normal state keymaps
            : Operator pending state
               : Reference bug report
               : Provide workaround
            : Setting key bindings by (non Evil) mode
            : Defining escape key
               : C-c
               : Mention keychords.el in passing
            : Deadends:
               : Mapping prefix key to keymap -- other modes may define the same prefix key in their own keymaps
               : Using Evil state hooks to turn key translations on and off
         : Draft:
            Managing key bindings with Evil
               If you want to use the full power of Emacs in Vim-like ways (ie using short key sequences near home row instead of Control-Shift-Nonsense), this section provides some guidance.  This guide assumes you've read the Evil manual section "Modes and states".
               Basic key bindings

