Issues:
   : Logging with my-msg
      : Have my-msg check the varargs for boundp, and handle unbounded vars accordingly.
      : Have it work in Emacs batch run
   : Have F4 work in the mini buffer for inserting a bullet character
      : Define the key binding in more Emacs-mainstream way
   : Evil
      : If I C-c or backspace to beginning of evil-search prompt, I have to wait in order to enter more input.  How to fix?
      : Try Frank's advice: https://bitbucket.org/lyro/evil/issue/279/evil-command-repeats-wrong-commands
         : Declare all commands added to evil-motion-state-map by (eg revert-buffer):
            (evil-declare-ignore-repeat 'revert-buffer)
      : Assess which Evil key bindings need to move from evil-normal-state-map to evil-motion-state-map
         (define-key evil-normal-state-map "y" 'evil-yank)
         (define-key evil-normal-state-map "Y" 'evil-yank-line)
         (define-key evil-normal-state-map "gf" 'find-file-at-point)
         (define-key evil-normal-state-map "gF" 'evil-find-file-at-point-with-line)
         : Email sent to Evil mailing list asking about this.
   : M-q problems
      : Highlight Java comment paragraph with V from top to bottom, M-q doesn't work.
         : Do it from bottom to top and it does.
      : Puts two spaces after period. Should do one.
   : Kbd macros:
      : So many ways to get an error (sexp navigation commands for example) that abort the kbd macro. How to improve this?
   : Emacs bug:
      : With my font lock settings, auto revert of source code does not cause font lock update until move point
      : Fbacktrace() returned empty string at times
   : Editing Lisp
      : Syntax highlighting:
         : Pairs of parens in different colors, bottom up from point
            : See code samples at: http://community.schemewiki.org/?scheme-faq-language
            : Perhaps extend paren (which provides show-paren-mode)?
               : paren.el looks fairly simple.
               : Uses overlays
            : Perhaps extend hi-lock (which provides highlight-regexp)
               : Uses font lock
            : Perhaps extend Rainbow Delimiters
               : Colors from top down.
               : Uses font lock
                  : Presumably because it highlights parens throughout the buffer
                  : Perhaps also because coloring doesn't change when point moves
      : How to make insert-pair useful?
         : Iterate through insert-pair-alist and define eg:
            : o(
            : o[
            : o{
            : o<
            : o"
            : o'
      : Put point well before {}, delete-pair ("od"), only closing } is deleted
      : Take a step back and look at my commands and their key bindings
      : adjust-parens:
         : Consider writing adjust-parens-yank function
            : Would do like yank but add close parens to the pasted Lisp code to balance it
            : For example, Copy "(if abc", paste "(if abc)":
               (if abc
                   def
                 ghi)
      : Try evil-paredit
      : Go through ParEdit reference guide and identify the alternatives
      : How to stop Emacs loading Lisp files when visiting them.
   : Keymapping
      : Edebug comes up in normal state.
         : Learn why
         : Give Edebug keymap priority for SPC over Evil.
      : Move key bindings systematically between keymaps
         : Approaches:
            : Preferred approach: Copy all key bindings from one keymap to another with better prefix Key Sequence
               : The key-binding function gets the keymap data structure.
                  : Does not observe Key Translation
            : Key Translation approach, as with C- and C-M- key bindings
            : read-event approach:
               : Does the hyperify example in the Elisp manual's documentation of key-translation-map help?
               : Bind a function to the desired prefix key, read-event, use event-modifiers function to check if control is applied, ...
         : GDB key bindings
            : Change C-x C-a C-<key> to (something convenient (maybe an upper case letter)) then <key>.
               : See http://www.gnu.org/software/emacs/manual/html_node/emacs/Commands-of-GUD.html
            : Compare with Edebug bindings, perhaps mimic key bindings
            : Bind SPC to step when debugger is active.
            : gud-until is busted.
               : Opens up source on other buffer when should use current source code buffer
               : Current execution is steps out, not actually at the until point
      : See here for how to rebind keys that are indistinguishable in the tty:
         http://lists.gnu.org/archive/html/help-gnu-emacs/2013-06/msg00300.html
   : Why don't < <= >= > functions take var args?
   : Key bindings in minibuffer:
      : See Frank Fischer's posting at:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
      : Is there a way to disable electric-pair-mode in the minibuffer?
   : Consider freeing up the m key for something like the % command.
   : How is emacs-startup-hook different from term-setup-hook?
   : How to automatically wrap text and code at 80 columns?
      : Auto fill mode?
         : Thought I turned it on, but "Fill" not in modeline.
   : When up arrowing through search history, Vim goes to end of line, Evil beginning.
      : This is consistent with Emacs minibuffer in general.  Investigate
      : Can I use an Evil ex hook for this?  See:
         https://bitbucket.org/lyro/evil/issue/166/some-key-bindings-are-missing-in-command
   : C-c bug:
      : Occasionally I get to a state which looks like insert, but has a C-c mapping for keyboard-quit.
   : How to mark search terms with different colors?
      : Leverage highlight-regexp or highlight-phrase:
         : Implementation:
            : Would use evil-transform-vim-style-regexp to translate regexp to Emacs style
            : Then feed into one of these highlight- functions.
            : How to clear highlights?
         : Limitations
            : Doesn't case-fold the same way.
      : Use Evil facilities:
         : evil-ex-make-hl makes a highlight object
         : evil-ex-delete-hl to clear them?
      : Submit RFE to Evil for a function analogous to highlight-regexp and highlight-phrase .
   : CLI args:
      : Experiment with specifying either a project name and/or an indentation offset via a command line option
         ;;(cl-pushnew '("offset" . (lambda (option-name) (my-msg "DEBUG: command-line-args-left=%s" command-line-args-left) ) command-switch-alist)
   : Debugging
      : Learn Edebug
         : Make it so as space uses the debugger's keybinding instead of Evil, in normal/motion state.  See solution above under "Keymapping".
      : Consider approaches to put *Messages* buffer to file.
         : standard-output variable can be a function that takes one argument: the char to print
         : See also with-output-to-temp-buffer
      : edebug-initial-mode to continue to breakpoint
   : Learn about Dired
      : Is there a notion of finding a set of files based on a criteria (search term, use of symbol), then iteratively visiting just those?
         : Need Dired Plus to visit marked files
      : Dired doesn't update when a directory is created separately.  Including when Auto Revert is enabled.
      : Would be nice if I could expand and collapse directories inline, rather than at the bottom of the same buffer, and retain same information.
      : The ^ command is inconvenient to reach, find another key binding.
   : CEDET
      : How to narrow down the project's include-path based on where the original file is in the project?
      : If a class name is not namespace scoped correctly, semantic-ia-fast-jump won't jump to it.  How to find right namespace using semantic?
      : Enhancement requests:
         : When doing semantic-ia-fast-jump on a variable, it may take me to eg Namespace::Class with point before Namespace.  I have to move cursor to Class to do another semantic-ia-fast-jump .  Perhaps provide customization that moves point to Class rather than to Namespace.
         : Show summary mode interferes with minibuffer output.  eg when halfway through inputting Key Sequence
      : semantic-analyze-proto-impl-toggle should use ff-find-other-file when GNU Global is not used.
      : Cases where semantic-ia-fast-jump doesn't work:
         : Use of std::tr1::shared_ptr
            : Confirm whether true for std::shared_ptr
         : Forward declarations
            : semantic-ia-fast-jump should use ff-find-other-file and use other file's includes, so as forward declarations work better.
      : Bug reports:
         : semantic-analyze-proto-impl-toggle
            : Takes 26 minutes
            : Use GNU Global without opening extra files
            : Without GNU Global, us ff-find-other-file
      : Investigate completions
         : Disable global-semantic-idle-completions-mode and assign an evil-insert-state or semantic-mode-map key binding
         : semantic-displayor-tooltip seems like the best choice for semantic-complete-inline-analyzer-idle-displayor-class
      : Is there a package that uses Semantic to generate static call graphs, similar to cflow?
      : Have semantic-ia-fast-jump push the location it left.  MRU isn't quite the same, it returns to last edit.
      : Why is global-semantic-mru-bookmark-mode off when my init file has it enabled?
      : Set semantic-idle-symbol-highlight-face to a similar face as global-semantic-highlight-func-mode uses, then enable global-semantic-idle-local-symbol-highlight-mode
      : While editing code, sometimes (probably but unconfirmed) Semantic will go elsewhere and screw up scroll position
         : Try turning on Semantic debugging submode?
         : Figure out whether semantic-fetch-tags travels (semantic-parse-tree-needs-update-p) path or (semantic-parse-tree-needs-rebuild-p) or other
      : Does MRU duplicate goto-chg?
      : Does not find tags when 'using namespace' in function scope
      : I found a case in Java (with JDEE) where calling semantic-symref seemed to permanently change point in other Java source files
      : A variable was defined in a named namespace, then anonymous namespace within that, in a .h file. A user in a .cc file did not find it via semantic-ia-fast-jump, even though .h file was included.
   : GNU Global
      : Based on FAQ, might need to set GTAGSFORCECPP to force .h files to be parsed as C++ instead of C.
      : Is it worth using outside of Semantic commands?
         : Review http://www.wolinlabs.com/blog/emacs.global.speedbar.html
   : Byte compilation:
      : Is there a way to have Emacs emit dependency info for GNU Make when compiling .el into .elc files, based on calls to require?
   : Java development
      : Try out emacs-eclim which uses Eclipse as a backend
         http://www.skybert.net/emacs/java/
   : Multi window navigation
      : Set up so as motion commands will go to all windows.
         : Make toggle for on and off.
   : Pretty printing or formatting
      : How to format code with the potential to change across file lines. The = doesn't.
   : Ediff
      : Deficiencies
         : When navigating in non changed regions, other window should navigate automatically in sync.
            : There is v, V, <, > commands, but why shouldn't it integrate with all existing motions?
               : v and V don't even resync the windows if they get out of sync.
         : Highlighting is overkill, hides font locking etc.
            : Can we use indicators in the margin?
               : How to indicate the intra line diffs this way?
                  : Perhaps with underline or bold face?
         : Should open vertically by default.
            : Set custom value, but doesn't work.
               : '(ediff-merge-split-window-function (quote split-window-vertically))
               : Seems ediff-merge-split-window-function is neither a variable nor function.
         : ediff-patch-file alters the file and saves.  What if I just want to preview the patch?
            : Ediff manual suggests ediff-patch-file is the only way.
            : ediff-patch-buffer doesn't work for multi file diffs.
         : Is there a way to forego having another window at all, and I can simply bind useful Ediff commands myself.
   : Diff mode
      : When navigating hunks, top of hunk displays in the middle of display, even if all of the hunk doesn't show.
         : Can use zt zb commands for now
      : Why not refine all diffs during initialization?
      : Try diff-auto-refine-mode
      : In the diff file, lines '^Only in .*' are not navigated to by diff-file-next and diff-file-prev.
   : Undo Tree
      : Undo in region can create inefficiencies so extreme I can't access parts of the undo tree in reasonable time periods.
      : Even if I don't (require 'undo-tree), I still get undo-tree if it's in my load path.
      : Visual tree is not as compact as it could be
      : Maybe set up undo-tree-auto-save-history to put undo history in ~/emacs-backup
      : Diffing:
         : Windows: Can't get undo diffs to work
         : Linux: Diff is so slow, I have to customize undo-tree-visualizer-diff to nil.
            : Profiling reveals that diff-no-select function takes up the time.
            : gnulib might have something useful:
               http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob;f=lib/diffseq.h;hb=HEAD
      : Undos are not correct for a test case
         : Steps on Windows 7:
            : Edit in Emacs and save
            : Outside of Emacs, edit earlier in buffer
         : Determine behavior with stock undo.
         : Could not reproduce on RHEL 5, either with stock undo or undo-tree.
   : Learn merging in Git
      : Use magit?
   : Learn about org-mode
   : Buffer Menu
      : What's the difference between Buffer Menu and BS?
      : If accidentally his S key:
         : tabulated-list-sort is called to sort by the column at point.
         : Sets tabulated-list-sort-key from its default nil value
         : There is then no interactive command I find to set it back to nil
         : However, kill-buffer works
   : Syntax tables:
      : Need to have _ and - as word characters:
         : Buffer Menu
         : Dired
   : Shell
      : Set --color flag to ls
      : Fix dark blue color for directories
      : See if eshell-command is useful for one-off commands
   : XML editting
      : Surround with tags
         : Some implementations:
            http://stackoverflow.com/questions/2746484/is-there-an-extension-or-mode-in-emacs-similar-to-surround-vim
            http://tech.groups.yahoo.com/group/emacs-nxml-mode/message/1012
      : Search based on XPath
   : electric-pair minor mode
      : Put /** */ in pair list.
      : Remove ' from pair list.  It's annoying in comments with English contractions.
      : There are circumstances when it is annoying when inserting into existing code.
         : Perhaps: insert the closing pair only when there is only whitespace to the end of line.
   : Pair matching
      : Need to be able to use % for <> pairs, "" and '' pairs too.
         : forward-sexp seems to have the knowledge match "" chars.  Understand how.
   : My match-list
      : advise Evil function so as I can use evil-ex to search and replace with cycle-match-list
   : Shift-Enter either:
      : Do a newline or evil-ret while simply Enter to evil-ret-and-indent or newline-and-indent
      : Shift-Enter for escaping Evil insert
   : Tabs
      : Is there a way to dynamically determine tab stops based on analyzing how indentation is used in file?
         : Some extensions:
            : guess-offset.el
            : guess-style.el
            : cc-guess.el
               : Documented as being a part of CC Mode and a part of GNU Emacs.
               : Had to download newer version to get style guessing feature.
               : Seems to work (M-x c-guess), but tab stops aren't updated.
               : Investigate per-buffer initialization which executes c-guess then sets the tab stops based on the c-guess.
                  : Invoking c-guess guess and installs the style.
                  : c-basic-offset is updated, likely to use this to set tab stops.
                  : Need to time initialization of many files
                     : If necessary, reduce default size of region to search for guessing style.
                  : Doesn't work: calling c-guess from the c-mode-common-hook
                  : Does work: M-x c-guess
                  : c-guess does a lot of other things I think, which makes it run long.
      : Backspace to tab stop backward-delete-whitespace-to-tab-stop
         : Perhaps create dedent-for-del-command
         : Doesn't correctly handle backspace when there's a selection.
            : Snag with solution:
               : Go into insert mode
               : Shift select text
               : C-h k verifies backspace calls backward-delete-char-untabify
               : Works:
                  : Hit Backspace key when .emacs bound it to backward-delete-char-untabify
               : Does not work:
                  : M-x backward-delete-char-untabify
               : Does not work:
                  : Hit backspace key when .emacs bound it to backspace-whitespace-to-tab-stop
         : Create del-whitespace-to-tab-stop function for core Emacs?
         : Do third party packages provide a better backspace?
            : Try sackspace
      : Perhaps rebind M-DEL to DEL to last tab stop
      : Try out using M-i and restoring TAB to its default binding
      : Using M-<n*my-offset> then SPACE or DEL might be a viable approach
      : Try binding tab-to-tab-stop to indent-line-function.
         : Could obstruct completion with current indent.el code.
   : Indentation:
      : Given (| indicates point):
            foo, // blah
            a, |
        Shouldn't M-; result in:
            foo, // blah
            a,   // |
        (// is aligned)
   : Consider Stefan's settings for anything useful
      https://lists.gnu.org/archive/html/bug-gnu-emacs/2013-06/msg00539.html
   : Improve Emacs initialization
      : Learn about emacs as a server and client
      : See if there's a better way to ensure essential commands are available in the presence of other init errors
         : See http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Errors
   : Figure out how to (setq-default major-mode 'text-mode) with out conflicting with Evil's (setq-default major-mode 'turn-on-evil-mode)
   : Finding location of .emacs.d
      : See thread: http://lists.gnu.org/archive/html/help-gnu-emacs/2012-10/msg00467.html
      : Try: using --eval flag with an ordinary load of init.el .  Verify correct behaviors result.
   : Pick through the elisp of others:
      : Michael Markert's:
         https://github.com/cofi/dotfiles/blob/master/emacs.d/config/cofi-evil.el
   : Read the Elisp manual:
      : Debugging
      : Marks
   : Read the Emacs manual:
      : Killing and Moving Text
         : Learn about the kill ring and registers
      : Amusements
   : Mailing list:
      : Read the email thread founding Evil:
         http://thread.gmane.org/gmane.emacs.vim-emulation/692
   : Other reading:
      Thorough GDB guide: http://www.dirac.org/linux/gdb/
   : Can Elisp macros use Xpaths to modify code?
   : How to distribute strings?
      : Stackoverflow:
         : URL:
            http://stackoverflow.com/questions/13962720/how-to-distribute-strings-in-emacs-or-vim
      : Further work:
         : Convert Evil regexp to Emacs regexp
         : Evil does not call replace-regexp, so need to also defadvice the appropriate Evil function.
         : Note: Evil's search and replace supports the \, feature.
   : Emacs encoding bug:
      : Put in file:
         <?xml version="1.0" encoding="UTF-16"?>
      : Displays gibberish because of UTF-16, even in fundamental mode.  I could maybe understand this in nxml mode.

Evil bugs (submitted):
   : Updating of highlighted search
      : I find the highlights for my searches with evil-search don't update as I'd expect.  Examples:
         1: Search on a term that appears throughout file.  Hold {{{j}}}.  Search terms will scroll in and out of view without becoming highlighted.
         2: Search for foo: {{{/foo}}}.  Put point over "f", {{{x}}} to delete it.  oo remains highlighted.  Moving around with {{{j}}}, {{{k}}} doesn't update the highlighting.
         3: Similarly, inserting text before "foo" creates incorrect highlighting.  {{{i}}}, type "baz", now "bazfoo" is highlighted.
         4: In Vim, if I search and replace (with {{{:1,$s/old/new/g}}}), then undo, the "old" string is highlighted.  Evil doesn't do that.  In Vim I liked this for verifying complex search and replace operations.
         5: Similarly, in Vim, a search and replace would use the new search term for further {{{n}}}, {{{N}}}.  So {{{:1,$s/old/new/g}}}, then {{{n}}} would go to instances of "old".
      : Bug submitted to Evil project.
         : Issue 1 was solved with a defcustom.
   : In Evil motion state, can't mouse click buttons.  RET works however.
   : Selecting only part of line and doing s/  */\n/g replaces whole line, including outside of selection.
      : Vim behaves similarly.

